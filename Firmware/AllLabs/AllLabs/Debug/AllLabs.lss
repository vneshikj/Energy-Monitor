
AllLabs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000019e8  00001a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d6  00800146  00800146  00001ac2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000130a  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae6  00000000  00000000  00002f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00004450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000844  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_1>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      2c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_11>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      38:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_14>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_21>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <seperate_and_load_power+0xa2>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 40       	sbci	r16, 0x00	; 0
      ec:	7a 10       	cpse	r7, r10
      ee:	f3 5a       	subi	r31, 0xA3	; 163
      f0:	00 a0       	ldd	r0, Z+32	; 0x20
      f2:	72 4e       	sbci	r23, 0xE2	; 226
      f4:	18 09       	sbc	r17, r8
      f6:	00 10       	cpse	r0, r0
      f8:	a5 d4       	rcall	.+2378   	; 0xa44 <main+0x92>
      fa:	e8 00       	.word	0x00e8	; ????
      fc:	00 e8       	ldi	r16, 0x80	; 128
      fe:	76 48       	sbci	r23, 0x86	; 134
     100:	17 00       	.word	0x0017	; ????
     102:	00 e4       	ldi	r16, 0x40	; 64
     104:	0b 54       	subi	r16, 0x4B	; 75
     106:	02 00       	.word	0x0002	; ????
     108:	00 ca       	rjmp	.-3072   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
     10a:	9a 3b       	cpi	r25, 0xBA	; 186
     10c:	00 00       	nop
     10e:	00 e1       	ldi	r16, 0x10	; 16
     110:	f5 05       	cpc	r31, r5
     112:	00 00       	nop
     114:	80 96       	adiw	r24, 0x20	; 32
     116:	98 00       	.word	0x0098	; ????
     118:	00 00       	nop
     11a:	40 42       	sbci	r20, 0x20	; 32
     11c:	0f 00       	.word	0x000f	; ????
     11e:	00 00       	nop
     120:	a0 86       	std	Z+8, r10	; 0x08
     122:	01 00       	.word	0x0001	; ????
     124:	00 00       	nop
     126:	10 27       	eor	r17, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	e8 03       	fmulsu	r22, r16
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	64 00       	.word	0x0064	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	0a 00       	.word	0x000a	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	01 00       	.word	0x0001	; ????
     140:	00 00       	nop
     142:	00 00       	nop
     144:	2c 76       	andi	r18, 0x6C	; 108
     146:	d8 88       	ldd	r13, Y+16	; 0x10
     148:	dc 67       	ori	r29, 0x7C	; 124
     14a:	4f 08       	sbc	r4, r15
     14c:	23 df       	rcall	.-442    	; 0xffffff94 <__eeprom_end+0xff7eff94>
     14e:	c1 df       	rcall	.-126    	; 0xd2 <__SREG__+0x93>
     150:	ae 59       	subi	r26, 0x9E	; 158
     152:	e1 b1       	in	r30, 0x01	; 1
     154:	b7 96       	adiw	r30, 0x27	; 39
     156:	e5 e3       	ldi	r30, 0x35	; 53
     158:	e4 53       	subi	r30, 0x34	; 52
     15a:	c6 3a       	cpi	r28, 0xA6	; 166
     15c:	e6 51       	subi	r30, 0x16	; 22
     15e:	99 76       	andi	r25, 0x69	; 105
     160:	96 e8       	ldi	r25, 0x86	; 134
     162:	e6 c2       	rjmp	.+1484   	; 0x730 <seperate_and_load_voltage+0xee>
     164:	84 26       	eor	r8, r20
     166:	eb 89       	ldd	r30, Y+19	; 0x13
     168:	8c 9b       	sbis	0x11, 4	; 17
     16a:	62 ed       	ldi	r22, 0xD2	; 210
     16c:	40 7c       	andi	r20, 0xC0	; 192
     16e:	6f fc       	.word	0xfc6f	; ????
     170:	ef bc       	out	0x2f, r14	; 47
     172:	9c 9f       	mul	r25, r28
     174:	40 f2       	brcs	.-112    	; 0x106 <__trampolines_end+0x1c>
     176:	ba a5       	ldd	r27, Y+42	; 0x2a
     178:	6f a5       	ldd	r22, Y+47	; 0x2f
     17a:	f4 90       	lpm	r15, Z
     17c:	05 5a       	subi	r16, 0xA5	; 165
     17e:	2a f7       	brpl	.-54     	; 0x14a <__trampolines_end+0x60>
     180:	5c 93       	st	X, r21
     182:	6b 6c       	ori	r22, 0xCB	; 203
     184:	f9 67       	ori	r31, 0x79	; 121
     186:	6d c1       	rjmp	.+730    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     188:	1b fc       	.word	0xfc1b	; ????
     18a:	e0 e4       	ldi	r30, 0x40	; 64
     18c:	0d 47       	sbci	r16, 0x7D	; 125
     18e:	fe f5       	brtc	.+126    	; 0x20e <.do_clear_bss_loop>
     190:	20 e6       	ldi	r18, 0x60	; 96
     192:	b5 00       	.word	0x00b5	; ????
     194:	d0 ed       	ldi	r29, 0xD0	; 208
     196:	90 2e       	mov	r9, r16
     198:	03 00       	.word	0x0003	; ????
     19a:	94 35       	cpi	r25, 0x54	; 84
     19c:	77 05       	cpc	r23, r7
     19e:	00 80       	ld	r0, Z
     1a0:	84 1e       	adc	r8, r20
     1a2:	08 00       	.word	0x0008	; ????
     1a4:	00 20       	and	r0, r0
     1a6:	4e 0a       	sbc	r4, r30
     1a8:	00 00       	nop
     1aa:	00 c8       	rjmp	.-4096   	; 0xfffff1ac <__eeprom_end+0xff7ef1ac>
     1ac:	0c 33       	cpi	r16, 0x3C	; 60
     1ae:	33 33       	cpi	r19, 0x33	; 51
     1b0:	33 0f       	add	r19, r19
     1b2:	98 6e       	ori	r25, 0xE8	; 232
     1b4:	12 83       	std	Z+2, r17	; 0x02
     1b6:	11 41       	sbci	r17, 0x11	; 17
     1b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1ba:	21 14       	cp	r2, r1
     1bc:	89 3b       	cpi	r24, 0xB9	; 185
     1be:	e6 55       	subi	r30, 0x56	; 86
     1c0:	16 cf       	rjmp	.-468    	; 0xffffffee <__eeprom_end+0xff7effee>
     1c2:	fe e6       	ldi	r31, 0x6E	; 110
     1c4:	db 18       	sub	r13, r11
     1c6:	d1 84       	ldd	r13, Z+9	; 0x09
     1c8:	4b 38       	cpi	r20, 0x8B	; 139
     1ca:	1b f7       	brvc	.-58     	; 0x192 <__trampolines_end+0xa8>
     1cc:	7c 1d       	adc	r23, r12
     1ce:	90 1d       	adc	r25, r0
     1d0:	a4 bb       	out	0x14, r26	; 20
     1d2:	e4 24       	eor	r14, r4
     1d4:	20 32       	cpi	r18, 0x20	; 32
     1d6:	84 72       	andi	r24, 0x24	; 36
     1d8:	5e 22       	and	r5, r30
     1da:	81 00       	.word	0x0081	; ????
     1dc:	c9 f1       	breq	.+114    	; 0x250 <__vector_21+0x2e>
     1de:	24 ec       	ldi	r18, 0xC4	; 196
     1e0:	a1 e5       	ldi	r26, 0x51	; 81
     1e2:	3d 27       	eor	r19, r29

000001e4 <__ctors_end>:
     1e4:	11 24       	eor	r1, r1
     1e6:	1f be       	out	0x3f, r1	; 63
     1e8:	cf ef       	ldi	r28, 0xFF	; 255
     1ea:	d8 e0       	ldi	r29, 0x08	; 8
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
     1f0:	11 e0       	ldi	r17, 0x01	; 1
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	e8 ee       	ldi	r30, 0xE8	; 232
     1f8:	f9 e1       	ldi	r31, 0x19	; 25
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
     1fc:	05 90       	lpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a6 34       	cpi	r26, 0x46	; 70
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
     206:	25 e0       	ldi	r18, 0x05	; 5
     208:	a6 e4       	ldi	r26, 0x46	; 70
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	ac 31       	cpi	r26, 0x1C	; 28
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <main>
     21a:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <__vector_21>:
volatile float power = 0;
volatile float Vrms = 0;
volatile float Irms = 0;

// Stores values after ADC conversion is completed and switches channels
ISR(ADC_vect) { 
     222:	1f 92       	push	r1
     224:	0f 92       	push	r0
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	0f 92       	push	r0
     22a:	11 24       	eor	r1, r1
     22c:	8f 93       	push	r24
     22e:	9f 93       	push	r25
     230:	ef 93       	push	r30
     232:	ff 93       	push	r31
	
	if(ADMUX & (1 << 0)) { // If currently reading voltage
     234:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     238:	80 ff       	sbrs	r24, 0
     23a:	0e c0       	rjmp	.+28     	; 0x258 <__vector_21+0x36>
		current[pos] = ADC;
     23c:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <pos>
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     24a:	ee 0f       	add	r30, r30
     24c:	ff 1f       	adc	r31, r31
     24e:	e4 50       	subi	r30, 0x04	; 4
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	91 83       	std	Z+1, r25	; 0x01
     254:	80 83       	st	Z, r24
     256:	12 c0       	rjmp	.+36     	; 0x27c <__vector_21+0x5a>
	} else { // If currently reading current, voltage conversion has completed
		voltage[pos] = ADC;
     258:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <pos>
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     262:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     266:	ee 0f       	add	r30, r30
     268:	ff 1f       	adc	r31, r31
     26a:	e4 5a       	subi	r30, 0xA4	; 164
     26c:	fe 4f       	sbci	r31, 0xFE	; 254
     26e:	91 83       	std	Z+1, r25	; 0x01
     270:	80 83       	st	Z, r24
		pos++; // Increment position
     272:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <pos>
     276:	8f 5f       	subi	r24, 0xFF	; 255
     278:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <pos>
	}
	
	if(pos > 79) { // When all samples are taken
     27c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <pos>
     280:	80 35       	cpi	r24, 0x50	; 80
     282:	40 f0       	brcs	.+16     	; 0x294 <__vector_21+0x72>
		ADCSRA &= (1 << ADATE) | (1 << ADIE); // Disable free running mode and ADC interrupts
     284:	ea e7       	ldi	r30, 0x7A	; 122
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	88 72       	andi	r24, 0x28	; 40
     28c:	80 83       	st	Z, r24
		calc = true; // Start calculation in main
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <calc>
	}
 	ADMUX ^= (1 << MUX0); // Toggles to read between current and voltage channels on each read
     294:	ec e7       	ldi	r30, 0x7C	; 124
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	90 81       	ld	r25, Z
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	89 27       	eor	r24, r25
     29e:	80 83       	st	Z, r24
}
     2a0:	ff 91       	pop	r31
     2a2:	ef 91       	pop	r30
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	0f 90       	pop	r0
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	0f 90       	pop	r0
     2ae:	1f 90       	pop	r1
     2b0:	18 95       	reti

000002b2 <__vector_1>:

ISR(INT0_vect) {
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	8f 93       	push	r24
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
	
	if(ADCSRA & (1 << ADSC)) { // If conversion in process, exit the ISR
     2c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2c6:	86 fd       	sbrc	r24, 6
     2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <__vector_1+0x30>
		return;
	}
	
	ADCSRA |= (1 << ADIE); // Enables ADC complete interrupt
     2ca:	ea e7       	ldi	r30, 0x7A	; 122
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	88 60       	ori	r24, 0x08	; 8
     2d2:	80 83       	st	Z, r24
	ADMUX |= (1 << 1); // Set to read current first
     2d4:	ec e7       	ldi	r30, 0x7C	; 124
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	82 60       	ori	r24, 0x02	; 2
     2dc:	80 83       	st	Z, r24
	ADCSRB = 0; // Sets ADC to free running mode	
     2de:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	 
}
     2e2:	ff 91       	pop	r31
     2e4:	ef 91       	pop	r30
     2e6:	8f 91       	pop	r24
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <adc_init>:


// Initializes ADC
void adc_init() {
	ADMUX |= (1 << REFS0); // Sets AVCC, reads from ADC0 initially (voltage waveform)
     2f2:	ec e7       	ldi	r30, 0x7C	; 124
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 64       	ori	r24, 0x40	; 64
     2fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADATE) | (1 << ADSC); // Enable ADC, set prescaler to 16, enable ADC interrupt, enable auto trigger, start conversion
     2fc:	ea e7       	ldi	r30, 0x7A	; 122
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	84 6e       	ori	r24, 0xE4	; 228
     304:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS1); // Sets trigger source to INT0
     306:	eb e7       	ldi	r30, 0x7B	; 123
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	82 60       	ori	r24, 0x02	; 2
     30e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0); // Enable interrupt on INT0
     310:	8d b3       	in	r24, 0x1d	; 29
     312:	81 60       	ori	r24, 0x01	; 1
     314:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC01) | (1 << ISC00); // Set rising edge to trigger interrupt
     316:	e9 e6       	ldi	r30, 0x69	; 105
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	83 60       	ori	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	08 95       	ret

00000322 <adc_convert_v>:
}

// Converts ADC to processed values
float adc_convert_v(uint16_t adc_result) {
	return ((float) adc_result * 5) / 1023; 
     322:	bc 01       	movw	r22, r24
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	40 ea       	ldi	r20, 0xA0	; 160
     332:	50 e4       	ldi	r21, 0x40	; 64
     334:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 ec       	ldi	r19, 0xC0	; 192
     33c:	4f e7       	ldi	r20, 0x7F	; 127
     33e:	54 e4       	ldi	r21, 0x44	; 68
     340:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
}
     344:	08 95       	ret

00000346 <convertAdcToVoltages>:

// Converts values from ADC to actual values
void convertAdcToVoltages() {
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
	for (uint8_t i = 0; i < 80; i++) {
     350:	f1 2c       	mov	r15, r1
     352:	3d c0       	rjmp	.+122    	; 0x3ce <convertAdcToVoltages+0x88>
		convVoltage[i] = (adc_convert_v(voltage[i]) - 2.1) * 21.8333; // Taking into account voltage divider and 2.1V offset
     354:	cf 2d       	mov	r28, r15
     356:	d0 e0       	ldi	r29, 0x00	; 0
     358:	8e 01       	movw	r16, r28
     35a:	00 0f       	add	r16, r16
     35c:	11 1f       	adc	r17, r17
     35e:	f8 01       	movw	r30, r16
     360:	e4 5a       	subi	r30, 0xA4	; 164
     362:	fe 4f       	sbci	r31, 0xFE	; 254
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01
     368:	0e 94 91 01 	call	0x322	; 0x322 <adc_convert_v>
     36c:	26 e6       	ldi	r18, 0x66	; 102
     36e:	36 e6       	ldi	r19, 0x66	; 102
     370:	46 e0       	ldi	r20, 0x06	; 6
     372:	50 e4       	ldi	r21, 0x40	; 64
     374:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     378:	29 e9       	ldi	r18, 0x99	; 153
     37a:	3a ea       	ldi	r19, 0xAA	; 170
     37c:	4e ea       	ldi	r20, 0xAE	; 174
     37e:	51 e4       	ldi	r21, 0x41	; 65
     380:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     384:	cc 0f       	add	r28, r28
     386:	dd 1f       	adc	r29, r29
     388:	cc 0f       	add	r28, r28
     38a:	dd 1f       	adc	r29, r29
     38c:	fe 01       	movw	r30, r28
     38e:	e4 52       	subi	r30, 0x24	; 36
     390:	fc 4f       	sbci	r31, 0xFC	; 252
     392:	60 83       	st	Z, r22
     394:	71 83       	std	Z+1, r23	; 0x01
     396:	82 83       	std	Z+2, r24	; 0x02
     398:	93 83       	std	Z+3, r25	; 0x03
		convCurrent[i] = (adc_convert_v(current[i]) - 2.1) / 0.9984; // taking into account 0.56 Ohm shunt, OPAMP and 2.1V offset
     39a:	f8 01       	movw	r30, r16
     39c:	e4 50       	subi	r30, 0x04	; 4
     39e:	fe 4f       	sbci	r31, 0xFE	; 254
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	0e 94 91 01 	call	0x322	; 0x322 <adc_convert_v>
     3a8:	26 e6       	ldi	r18, 0x66	; 102
     3aa:	36 e6       	ldi	r19, 0x66	; 102
     3ac:	46 e0       	ldi	r20, 0x06	; 6
     3ae:	50 e4       	ldi	r21, 0x40	; 64
     3b0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     3b4:	24 e2       	ldi	r18, 0x24	; 36
     3b6:	37 e9       	ldi	r19, 0x97	; 151
     3b8:	4f e7       	ldi	r20, 0x7F	; 127
     3ba:	5f e3       	ldi	r21, 0x3F	; 63
     3bc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     3c0:	c4 56       	subi	r28, 0x64	; 100
     3c2:	dd 4f       	sbci	r29, 0xFD	; 253
     3c4:	68 83       	st	Y, r22
     3c6:	79 83       	std	Y+1, r23	; 0x01
     3c8:	8a 83       	std	Y+2, r24	; 0x02
     3ca:	9b 83       	std	Y+3, r25	; 0x03
	return ((float) adc_result * 5) / 1023; 
}

// Converts values from ADC to actual values
void convertAdcToVoltages() {
	for (uint8_t i = 0; i < 80; i++) {
     3cc:	f3 94       	inc	r15
     3ce:	8f e4       	ldi	r24, 0x4F	; 79
     3d0:	8f 15       	cp	r24, r15
     3d2:	08 f0       	brcs	.+2      	; 0x3d6 <convertAdcToVoltages+0x90>
     3d4:	bf cf       	rjmp	.-130    	; 0x354 <convertAdcToVoltages+0xe>
		convVoltage[i] = (adc_convert_v(voltage[i]) - 2.1) * 21.8333; // Taking into account voltage divider and 2.1V offset
		convCurrent[i] = (adc_convert_v(current[i]) - 2.1) / 0.9984; // taking into account 0.56 Ohm shunt, OPAMP and 2.1V offset
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <rmsCalculator>:

void rmsCalculator() { // (Riemann Sum repeated)
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
	for(uint8_t i = 0; i < 80; i++) {
     3e8:	10 e0       	ldi	r17, 0x00	; 0
     3ea:	44 c0       	rjmp	.+136    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		Vrms += pow(convVoltage[i], 2); // Taking the sum of all values, squaring them (Riemann Sum)
     3ec:	c1 2f       	mov	r28, r17
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	cc 0f       	add	r28, r28
     3f2:	dd 1f       	adc	r29, r29
     3f4:	cc 0f       	add	r28, r28
     3f6:	dd 1f       	adc	r29, r29
     3f8:	fe 01       	movw	r30, r28
     3fa:	e4 52       	subi	r30, 0x24	; 36
     3fc:	fc 4f       	sbci	r31, 0xFC	; 252
     3fe:	60 81       	ld	r22, Z
     400:	71 81       	ldd	r23, Z+1	; 0x01
     402:	82 81       	ldd	r24, Z+2	; 0x02
     404:	93 81       	ldd	r25, Z+3	; 0x03
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e4       	ldi	r21, 0x40	; 64
     40e:	0e 94 88 08 	call	0x1110	; 0x1110 <pow>
     412:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <Vrms>
     416:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <Vrms+0x1>
     41a:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <Vrms+0x2>
     41e:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <Vrms+0x3>
     422:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     426:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <Vrms>
     42a:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <Vrms+0x1>
     42e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Vrms+0x2>
     432:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <Vrms+0x3>
		Irms += pow(convCurrent[i], 2);
     436:	c4 56       	subi	r28, 0x64	; 100
     438:	dd 4f       	sbci	r29, 0xFD	; 253
     43a:	68 81       	ld	r22, Y
     43c:	79 81       	ldd	r23, Y+1	; 0x01
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	9b 81       	ldd	r25, Y+3	; 0x03
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e4       	ldi	r21, 0x40	; 64
     44a:	0e 94 88 08 	call	0x1110	; 0x1110 <pow>
     44e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__data_end>
     452:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <__data_end+0x1>
     456:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <__data_end+0x2>
     45a:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <__data_end+0x3>
     45e:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     462:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <__data_end>
     466:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <__data_end+0x1>
     46a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end+0x2>
     46e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x3>
		convCurrent[i] = (adc_convert_v(current[i]) - 2.1) / 0.9984; // taking into account 0.56 Ohm shunt, OPAMP and 2.1V offset
	}
}

void rmsCalculator() { // (Riemann Sum repeated)
	for(uint8_t i = 0; i < 80; i++) {
     472:	1f 5f       	subi	r17, 0xFF	; 255
     474:	10 35       	cpi	r17, 0x50	; 80
     476:	08 f4       	brcc	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     478:	b9 cf       	rjmp	.-142    	; 0x3ec <rmsCalculator+0xa>
		Vrms += pow(convVoltage[i], 2); // Taking the sum of all values, squaring them (Riemann Sum)
		Irms += pow(convCurrent[i], 2);
	}
	Vrms = sqrt(Vrms / 80); // Diving by number of samples taken
     47a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <Vrms>
     47e:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <Vrms+0x1>
     482:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Vrms+0x2>
     486:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Vrms+0x3>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 ea       	ldi	r20, 0xA0	; 160
     490:	52 e4       	ldi	r21, 0x42	; 66
     492:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     496:	0e 94 de 08 	call	0x11bc	; 0x11bc <sqrt>
     49a:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <Vrms>
     49e:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <Vrms+0x1>
     4a2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Vrms+0x2>
     4a6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <Vrms+0x3>
	Irms = sqrt(Irms / 80);
     4aa:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
     4ae:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <__data_end+0x1>
     4b2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end+0x2>
     4b6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__data_end+0x3>
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 ea       	ldi	r20, 0xA0	; 160
     4c0:	52 e4       	ldi	r21, 0x42	; 66
     4c2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     4c6:	0e 94 de 08 	call	0x11bc	; 0x11bc <sqrt>
     4ca:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <__data_end>
     4ce:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <__data_end+0x1>
     4d2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end+0x2>
     4d6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x3>
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <linearApproxPower>:


void linearApproxPower() {
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
	float approxVoltage;
	float approxCurrent;
	
	for (uint8_t i = 1; i < 79; i++) { // Using linear approximation to estimate missing data points
     500:	dd 24       	eor	r13, r13
     502:	d3 94       	inc	r13
     504:	6a c0       	rjmp	.+212    	; 0x5da <linearApproxPower+0xf8>
		approxVoltage = (convVoltage[i] + convVoltage[i + 1]) / 2;
     506:	cd 2d       	mov	r28, r13
     508:	d0 e0       	ldi	r29, 0x00	; 0
     50a:	8e 01       	movw	r16, r28
     50c:	00 0f       	add	r16, r16
     50e:	11 1f       	adc	r17, r17
     510:	00 0f       	add	r16, r16
     512:	11 1f       	adc	r17, r17
     514:	c8 01       	movw	r24, r16
     516:	84 52       	subi	r24, 0x24	; 36
     518:	9c 4f       	sbci	r25, 0xFC	; 252
     51a:	7c 01       	movw	r14, r24
     51c:	fc 01       	movw	r30, r24
     51e:	60 81       	ld	r22, Z
     520:	71 81       	ldd	r23, Z+1	; 0x01
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	93 81       	ldd	r25, Z+3	; 0x03
     526:	fe 01       	movw	r30, r28
     528:	31 96       	adiw	r30, 0x01	; 1
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	e4 52       	subi	r30, 0x24	; 36
     534:	fc 4f       	sbci	r31, 0xFC	; 252
     536:	20 81       	ld	r18, Z
     538:	31 81       	ldd	r19, Z+1	; 0x01
     53a:	42 81       	ldd	r20, Z+2	; 0x02
     53c:	53 81       	ldd	r21, Z+3	; 0x03
     53e:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	5f e3       	ldi	r21, 0x3F	; 63
     54a:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     54e:	4b 01       	movw	r8, r22
     550:	5c 01       	movw	r10, r24
		approxCurrent = (convCurrent[i - 1] + convCurrent[i]) / 2;
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	cc 0f       	add	r28, r28
     556:	dd 1f       	adc	r29, r29
     558:	cc 0f       	add	r28, r28
     55a:	dd 1f       	adc	r29, r29
     55c:	c4 56       	subi	r28, 0x64	; 100
     55e:	dd 4f       	sbci	r29, 0xFD	; 253
     560:	68 81       	ld	r22, Y
     562:	79 81       	ldd	r23, Y+1	; 0x01
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	9b 81       	ldd	r25, Y+3	; 0x03
     568:	e8 01       	movw	r28, r16
     56a:	c4 56       	subi	r28, 0x64	; 100
     56c:	dd 4f       	sbci	r29, 0xFD	; 253
     56e:	28 81       	ld	r18, Y
     570:	39 81       	ldd	r19, Y+1	; 0x01
     572:	4a 81       	ldd	r20, Y+2	; 0x02
     574:	5b 81       	ldd	r21, Y+3	; 0x03
     576:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
		
		power += convVoltage[i] * approxCurrent + approxVoltage * convCurrent[i];
     586:	f7 01       	movw	r30, r14
     588:	20 81       	ld	r18, Z
     58a:	31 81       	ldd	r19, Z+1	; 0x01
     58c:	42 81       	ldd	r20, Z+2	; 0x02
     58e:	53 81       	ldd	r21, Z+3	; 0x03
     590:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     594:	2b 01       	movw	r4, r22
     596:	3c 01       	movw	r6, r24
     598:	28 81       	ld	r18, Y
     59a:	39 81       	ldd	r19, Y+1	; 0x01
     59c:	4a 81       	ldd	r20, Y+2	; 0x02
     59e:	5b 81       	ldd	r21, Y+3	; 0x03
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     5b4:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <power>
     5b8:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <power+0x1>
     5bc:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <power+0x2>
     5c0:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <power+0x3>
     5c4:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
     5c8:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <power>
     5cc:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <power+0x1>
     5d0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <power+0x2>
     5d4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <power+0x3>

void linearApproxPower() {
	float approxVoltage;
	float approxCurrent;
	
	for (uint8_t i = 1; i < 79; i++) { // Using linear approximation to estimate missing data points
     5d8:	d3 94       	inc	r13
     5da:	fe e4       	ldi	r31, 0x4E	; 78
     5dc:	fd 15       	cp	r31, r13
     5de:	08 f0       	brcs	.+2      	; 0x5e2 <linearApproxPower+0x100>
     5e0:	92 cf       	rjmp	.-220    	; 0x506 <linearApproxPower+0x24>
		approxVoltage = (convVoltage[i] + convVoltage[i + 1]) / 2;
		approxCurrent = (convCurrent[i - 1] + convCurrent[i]) / 2;
		
		power += convVoltage[i] * approxCurrent + approxVoltage * convCurrent[i];
	}
	power /= 130;
     5e2:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <power>
     5e6:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <power+0x1>
     5ea:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <power+0x2>
     5ee:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <power+0x3>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	42 e0       	ldi	r20, 0x02	; 2
     5f8:	53 e4       	ldi	r21, 0x43	; 67
     5fa:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__divsf3>
     5fe:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <power>
     602:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <power+0x1>
     606:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <power+0x2>
     60a:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <power+0x3>
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	df 90       	pop	r13
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	7f 90       	pop	r7
     626:	6f 90       	pop	r6
     628:	5f 90       	pop	r5
     62a:	4f 90       	pop	r4
     62c:	08 95       	ret

0000062e <init_display>:
const uint8_t seg_pattern[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
static volatile uint8_t disp_characters[4] = {0, 0, 0, 0}; // stores characters to be displayed
volatile uint8_t disp_position = 0; // determines which display to enable

void init_display() {
	DDRC |= (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5); // Sets SH_CP, SH_DS, SH_ST as output
     62e:	87 b1       	in	r24, 0x07	; 7
     630:	88 63       	ori	r24, 0x38	; 56
     632:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << PORTD7) | (1 << PORTD6) | (1 << PORTD5) | (1 << PORTD4); // Setting Ds4, Ds3, Ds2, Ds1 as output
     634:	8a b1       	in	r24, 0x0a	; 10
     636:	80 6f       	ori	r24, 0xF0	; 240
     638:	8a b9       	out	0x0a, r24	; 10
	DIGITS_OFF; // initialize digits to be off
     63a:	8b b1       	in	r24, 0x0b	; 11
     63c:	80 6f       	ori	r24, 0xF0	; 240
     63e:	8b b9       	out	0x0b, r24	; 11
     640:	08 95       	ret

00000642 <seperate_and_load_voltage>:
}


void seperate_and_load_voltage(float v) {
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
	cli();
     64a:	f8 94       	cli
	uint16_t voltage = v * 10; // move everything left of decimal to separate digits
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e2       	ldi	r20, 0x20	; 32
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     658:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     65c:	6b 01       	movw	r12, r22
     65e:	7c 01       	movw	r14, r24
	disp_characters[0] = seg_pattern[(voltage / 100) % 10]; // assign digit to disp_characters
     660:	9b 01       	movw	r18, r22
     662:	36 95       	lsr	r19
     664:	27 95       	ror	r18
     666:	36 95       	lsr	r19
     668:	27 95       	ror	r18
     66a:	ab e7       	ldi	r26, 0x7B	; 123
     66c:	b4 e1       	ldi	r27, 0x14	; 20
     66e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     672:	ac 01       	movw	r20, r24
     674:	56 95       	lsr	r21
     676:	47 95       	ror	r20
     678:	9a 01       	movw	r18, r20
     67a:	ad ec       	ldi	r26, 0xCD	; 205
     67c:	bc ec       	ldi	r27, 0xCC	; 204
     67e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     682:	96 95       	lsr	r25
     684:	87 95       	ror	r24
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	9c 01       	movw	r18, r24
     690:	22 0f       	add	r18, r18
     692:	33 1f       	adc	r19, r19
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
     6a4:	9a 01       	movw	r18, r20
     6a6:	28 1b       	sub	r18, r24
     6a8:	39 0b       	sbc	r19, r25
     6aa:	f9 01       	movw	r30, r18
     6ac:	e0 50       	subi	r30, 0x00	; 0
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	80 81       	ld	r24, Z
     6b2:	e5 e5       	ldi	r30, 0x55	; 85
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	80 83       	st	Z, r24
	disp_characters[1] = seg_pattern[(voltage / 10) % 10]; 
     6b8:	96 01       	movw	r18, r12
     6ba:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     6be:	ac 01       	movw	r20, r24
     6c0:	56 95       	lsr	r21
     6c2:	47 95       	ror	r20
     6c4:	56 95       	lsr	r21
     6c6:	47 95       	ror	r20
     6c8:	56 95       	lsr	r21
     6ca:	47 95       	ror	r20
     6cc:	9a 01       	movw	r18, r20
     6ce:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     6d2:	96 95       	lsr	r25
     6d4:	87 95       	ror	r24
     6d6:	96 95       	lsr	r25
     6d8:	87 95       	ror	r24
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	9c 01       	movw	r18, r24
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	82 0f       	add	r24, r18
     6f2:	93 1f       	adc	r25, r19
     6f4:	9a 01       	movw	r18, r20
     6f6:	28 1b       	sub	r18, r24
     6f8:	39 0b       	sbc	r19, r25
     6fa:	d9 01       	movw	r26, r18
     6fc:	a0 50       	subi	r26, 0x00	; 0
     6fe:	bf 4f       	sbci	r27, 0xFF	; 255
     700:	8c 91       	ld	r24, X
     702:	81 83       	std	Z+1, r24	; 0x01
	disp_characters[1] |= (1 << 7); // set first bit to high, to enable decimal point
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	80 68       	ori	r24, 0x80	; 128
     708:	81 83       	std	Z+1, r24	; 0x01
	disp_characters[2] = seg_pattern[voltage % 10]; // decimal point here
     70a:	ca 01       	movw	r24, r20
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	44 0f       	add	r20, r20
     712:	55 1f       	adc	r21, r21
     714:	44 0f       	add	r20, r20
     716:	55 1f       	adc	r21, r21
     718:	44 0f       	add	r20, r20
     71a:	55 1f       	adc	r21, r21
     71c:	48 0f       	add	r20, r24
     71e:	59 1f       	adc	r21, r25
     720:	c6 01       	movw	r24, r12
     722:	84 1b       	sub	r24, r20
     724:	95 0b       	sbc	r25, r21
     726:	dc 01       	movw	r26, r24
     728:	a0 50       	subi	r26, 0x00	; 0
     72a:	bf 4f       	sbci	r27, 0xFF	; 255
     72c:	8c 91       	ld	r24, X
     72e:	82 83       	std	Z+2, r24	; 0x02
	disp_characters[3] = 0b00111110; // unit for voltage (volts)
     730:	8e e3       	ldi	r24, 0x3E	; 62
     732:	83 83       	std	Z+3, r24	; 0x03
	sei();
     734:	78 94       	sei
}
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	08 95       	ret

00000740 <seperate_and_load_current>:

void seperate_and_load_current(float i) {
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
	cli();
     748:	f8 94       	cli
	uint16_t current = i * 10000; // move everything left of decimal to separate digits
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e4       	ldi	r19, 0x40	; 64
     74e:	4c e1       	ldi	r20, 0x1C	; 28
     750:	56 e4       	ldi	r21, 0x46	; 70
     752:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     756:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     75a:	6b 01       	movw	r12, r22
     75c:	7c 01       	movw	r14, r24
	disp_characters[0] = seg_pattern[current/1000]; // hundreds
     75e:	9b 01       	movw	r18, r22
     760:	36 95       	lsr	r19
     762:	27 95       	ror	r18
     764:	36 95       	lsr	r19
     766:	27 95       	ror	r18
     768:	36 95       	lsr	r19
     76a:	27 95       	ror	r18
     76c:	a5 ec       	ldi	r26, 0xC5	; 197
     76e:	b0 e2       	ldi	r27, 0x20	; 32
     770:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     774:	92 95       	swap	r25
     776:	82 95       	swap	r24
     778:	8f 70       	andi	r24, 0x0F	; 15
     77a:	89 27       	eor	r24, r25
     77c:	9f 70       	andi	r25, 0x0F	; 15
     77e:	89 27       	eor	r24, r25
     780:	fc 01       	movw	r30, r24
     782:	e0 50       	subi	r30, 0x00	; 0
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	80 81       	ld	r24, Z
     788:	e5 e5       	ldi	r30, 0x55	; 85
     78a:	f1 e0       	ldi	r31, 0x01	; 1
     78c:	80 83       	st	Z, r24
	disp_characters[1] = seg_pattern[(current/100)%10]; // tens
     78e:	96 01       	movw	r18, r12
     790:	36 95       	lsr	r19
     792:	27 95       	ror	r18
     794:	36 95       	lsr	r19
     796:	27 95       	ror	r18
     798:	ab e7       	ldi	r26, 0x7B	; 123
     79a:	b4 e1       	ldi	r27, 0x14	; 20
     79c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     7a0:	ac 01       	movw	r20, r24
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	9a 01       	movw	r18, r20
     7a8:	ad ec       	ldi	r26, 0xCD	; 205
     7aa:	bc ec       	ldi	r27, 0xCC	; 204
     7ac:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     7b0:	96 95       	lsr	r25
     7b2:	87 95       	ror	r24
     7b4:	96 95       	lsr	r25
     7b6:	87 95       	ror	r24
     7b8:	96 95       	lsr	r25
     7ba:	87 95       	ror	r24
     7bc:	9c 01       	movw	r18, r24
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	82 0f       	add	r24, r18
     7d0:	93 1f       	adc	r25, r19
     7d2:	9a 01       	movw	r18, r20
     7d4:	28 1b       	sub	r18, r24
     7d6:	39 0b       	sbc	r19, r25
     7d8:	d9 01       	movw	r26, r18
     7da:	a0 50       	subi	r26, 0x00	; 0
     7dc:	bf 4f       	sbci	r27, 0xFF	; 255
     7de:	8c 91       	ld	r24, X
     7e0:	81 83       	std	Z+1, r24	; 0x01
	disp_characters[2] = seg_pattern[(current/10)%10]; // ones
     7e2:	96 01       	movw	r18, r12
     7e4:	ad ec       	ldi	r26, 0xCD	; 205
     7e6:	bc ec       	ldi	r27, 0xCC	; 204
     7e8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     7ec:	ac 01       	movw	r20, r24
     7ee:	56 95       	lsr	r21
     7f0:	47 95       	ror	r20
     7f2:	56 95       	lsr	r21
     7f4:	47 95       	ror	r20
     7f6:	56 95       	lsr	r21
     7f8:	47 95       	ror	r20
     7fa:	9a 01       	movw	r18, r20
     7fc:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     800:	96 95       	lsr	r25
     802:	87 95       	ror	r24
     804:	96 95       	lsr	r25
     806:	87 95       	ror	r24
     808:	96 95       	lsr	r25
     80a:	87 95       	ror	r24
     80c:	9c 01       	movw	r18, r24
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	9a 01       	movw	r18, r20
     824:	28 1b       	sub	r18, r24
     826:	39 0b       	sbc	r19, r25
     828:	d9 01       	movw	r26, r18
     82a:	a0 50       	subi	r26, 0x00	; 0
     82c:	bf 4f       	sbci	r27, 0xFF	; 255
     82e:	8c 91       	ld	r24, X
     830:	82 83       	std	Z+2, r24	; 0x02
	disp_characters[3] = 0b01110111; // unit for current (amps)
     832:	87 e7       	ldi	r24, 0x77	; 119
     834:	83 83       	std	Z+3, r24	; 0x03
	sei();
     836:	78 94       	sei
}
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	08 95       	ret

00000842 <seperate_and_load_power>:


void seperate_and_load_power(float p) {
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
	cli();
     84a:	f8 94       	cli
	uint16_t powerDigits = p * 100; // move everything left of decimal to separate digits
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	48 ec       	ldi	r20, 0xC8	; 200
     852:	52 e4       	ldi	r21, 0x42	; 66
     854:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     858:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
	disp_characters[0] = seg_pattern[(powerDigits/100)]; // decimal point here
     860:	9b 01       	movw	r18, r22
     862:	36 95       	lsr	r19
     864:	27 95       	ror	r18
     866:	36 95       	lsr	r19
     868:	27 95       	ror	r18
     86a:	ab e7       	ldi	r26, 0x7B	; 123
     86c:	b4 e1       	ldi	r27, 0x14	; 20
     86e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     872:	96 95       	lsr	r25
     874:	87 95       	ror	r24
     876:	fc 01       	movw	r30, r24
     878:	e0 50       	subi	r30, 0x00	; 0
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	80 81       	ld	r24, Z
     87e:	e5 e5       	ldi	r30, 0x55	; 85
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	80 83       	st	Z, r24
	disp_characters[0] |= (1 << 7); // set first bit to high, to enable decimal point 
     884:	80 81       	ld	r24, Z
     886:	80 68       	ori	r24, 0x80	; 128
     888:	80 83       	st	Z, r24
	disp_characters[1] = seg_pattern[(powerDigits/10) % 10]; 
     88a:	96 01       	movw	r18, r12
     88c:	ad ec       	ldi	r26, 0xCD	; 205
     88e:	bc ec       	ldi	r27, 0xCC	; 204
     890:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     894:	ac 01       	movw	r20, r24
     896:	56 95       	lsr	r21
     898:	47 95       	ror	r20
     89a:	56 95       	lsr	r21
     89c:	47 95       	ror	r20
     89e:	56 95       	lsr	r21
     8a0:	47 95       	ror	r20
     8a2:	9a 01       	movw	r18, r20
     8a4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__umulhisi3>
     8a8:	96 95       	lsr	r25
     8aa:	87 95       	ror	r24
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	96 95       	lsr	r25
     8b2:	87 95       	ror	r24
     8b4:	9c 01       	movw	r18, r24
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	82 0f       	add	r24, r18
     8c8:	93 1f       	adc	r25, r19
     8ca:	9a 01       	movw	r18, r20
     8cc:	28 1b       	sub	r18, r24
     8ce:	39 0b       	sbc	r19, r25
     8d0:	d9 01       	movw	r26, r18
     8d2:	a0 50       	subi	r26, 0x00	; 0
     8d4:	bf 4f       	sbci	r27, 0xFF	; 255
     8d6:	8c 91       	ld	r24, X
     8d8:	81 83       	std	Z+1, r24	; 0x01
	disp_characters[2] = seg_pattern[(powerDigits % 10)]; 
     8da:	ca 01       	movw	r24, r20
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	44 0f       	add	r20, r20
     8e2:	55 1f       	adc	r21, r21
     8e4:	44 0f       	add	r20, r20
     8e6:	55 1f       	adc	r21, r21
     8e8:	44 0f       	add	r20, r20
     8ea:	55 1f       	adc	r21, r21
     8ec:	48 0f       	add	r20, r24
     8ee:	59 1f       	adc	r21, r25
     8f0:	c6 01       	movw	r24, r12
     8f2:	84 1b       	sub	r24, r20
     8f4:	95 0b       	sbc	r25, r21
     8f6:	dc 01       	movw	r26, r24
     8f8:	a0 50       	subi	r26, 0x00	; 0
     8fa:	bf 4f       	sbci	r27, 0xFF	; 255
     8fc:	8c 91       	ld	r24, X
     8fe:	82 83       	std	Z+2, r24	; 0x02
	disp_characters[3] = 0b01110011; // p, power symbol
     900:	83 e7       	ldi	r24, 0x73	; 115
     902:	83 83       	std	Z+3, r24	; 0x03
	sei();
     904:	78 94       	sei
}
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	08 95       	ret

00000910 <send_next_character_to_display>:

void send_next_character_to_display() {
	for(int8_t i = 7; i >= 0; i--) {
     910:	27 e0       	ldi	r18, 0x07	; 7
     912:	1d c0       	rjmp	.+58     	; 0x94e <send_next_character_to_display+0x3e>
		PORTC &= ~(1 << PORTC3); // Toggle SH_CP OFF
     914:	88 b1       	in	r24, 0x08	; 8
     916:	87 7f       	andi	r24, 0xF7	; 247
     918:	88 b9       	out	0x08, r24	; 8
		if (disp_characters[disp_position] & (1 << i)) { // Checks if the ith bit of the pattern is 1
     91a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <disp_position>
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	eb 5a       	subi	r30, 0xAB	; 171
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	80 81       	ld	r24, Z
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 2e       	mov	r0, r18
     92a:	02 c0       	rjmp	.+4      	; 0x930 <send_next_character_to_display+0x20>
     92c:	95 95       	asr	r25
     92e:	87 95       	ror	r24
     930:	0a 94       	dec	r0
     932:	e2 f7       	brpl	.-8      	; 0x92c <send_next_character_to_display+0x1c>
     934:	80 ff       	sbrs	r24, 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <send_next_character_to_display+0x30>
			PORTC |= (1 << PORTC4); // Set SH_DS to 1
     938:	88 b1       	in	r24, 0x08	; 8
     93a:	80 61       	ori	r24, 0x10	; 16
     93c:	88 b9       	out	0x08, r24	; 8
     93e:	03 c0       	rjmp	.+6      	; 0x946 <send_next_character_to_display+0x36>
			} else {
			PORTC &= ~(1 << PORTC4); // Otherwise ith bit must be 0 so set SH_DS to 0
     940:	88 b1       	in	r24, 0x08	; 8
     942:	8f 7e       	andi	r24, 0xEF	; 239
     944:	88 b9       	out	0x08, r24	; 8
		}
		PORTC |= (1 << PORTC3); // Toggle SH_CP ON
     946:	88 b1       	in	r24, 0x08	; 8
     948:	88 60       	ori	r24, 0x08	; 8
     94a:	88 b9       	out	0x08, r24	; 8
	disp_characters[3] = 0b01110011; // p, power symbol
	sei();
}

void send_next_character_to_display() {
	for(int8_t i = 7; i >= 0; i--) {
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	22 23       	and	r18, r18
     950:	0c f7       	brge	.-62     	; 0x914 <send_next_character_to_display+0x4>
			} else {
			PORTC &= ~(1 << PORTC4); // Otherwise ith bit must be 0 so set SH_DS to 0
		}
		PORTC |= (1 << PORTC3); // Toggle SH_CP ON
	} // All bits clocked here 
	DIGITS_OFF;
     952:	8b b1       	in	r24, 0x0b	; 11
     954:	80 6f       	ori	r24, 0xF0	; 240
     956:	8b b9       	out	0x0b, r24	; 11
	SH_ST_ON; // Toggle SH_ST ON
     958:	88 b1       	in	r24, 0x08	; 8
     95a:	80 62       	ori	r24, 0x20	; 32
     95c:	88 b9       	out	0x08, r24	; 8
	SH_ST_OFF; // Toggle SH_ST OFF
     95e:	88 b1       	in	r24, 0x08	; 8
     960:	8f 7d       	andi	r24, 0xDF	; 223
     962:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~(1 << (disp_position + 4)); // Digit 4 for position 3
     964:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <disp_position>
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	2c 5f       	subi	r18, 0xFC	; 252
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <send_next_character_to_display+0x68>
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	2a 95       	dec	r18
     97a:	e2 f7       	brpl	.-8      	; 0x974 <send_next_character_to_display+0x64>
     97c:	80 95       	com	r24
     97e:	90 95       	com	r25
     980:	9b b1       	in	r25, 0x0b	; 11
     982:	89 23       	and	r24, r25
     984:	8b b9       	out	0x0b, r24	; 11
	disp_position++; 
     986:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <disp_position>
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <disp_position>
	if (disp_position > 3) disp_position = 0; // increment disp_position, or reset it if it reaches 3
     990:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <disp_position>
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	10 f0       	brcs	.+4      	; 0x99c <send_next_character_to_display+0x8c>
     998:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <disp_position>
     99c:	08 95       	ret

0000099e <ddr_init>:
extern volatile float power; // store Vrms, Irms and power
int8_t iteration = 0; // to choose to send Vrms, Irms or power to display
extern volatile bool calc;

void ddr_init() {
	DDRC &= ~((1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2)); // Set as input: Vs, Is, DCs (DC Offset)
     99e:	87 b1       	in	r24, 0x07	; 7
     9a0:	88 7f       	andi	r24, 0xF8	; 248
     9a2:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~(1 << PORTD2); // Set as input voltage zero crossing detector
     9a4:	8a b1       	in	r24, 0x0a	; 10
     9a6:	8b 7f       	andi	r24, 0xFB	; 251
     9a8:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << PORTB5); // Setting LED as output for debugging
     9aa:	84 b1       	in	r24, 0x04	; 4
     9ac:	80 62       	ori	r24, 0x20	; 32
     9ae:	84 b9       	out	0x04, r24	; 4
     9b0:	08 95       	ret

000009b2 <main>:
}

int main(void)
{
	ddr_init(); 
     9b2:	0e 94 cf 04 	call	0x99e	; 0x99e <ddr_init>
	timer0_init(); 
     9b6:	0e 94 5d 05 	call	0xaba	; 0xaba <timer0_init>
	adc_init(); 
     9ba:	0e 94 79 01 	call	0x2f2	; 0x2f2 <adc_init>
	usart_init(12); 
     9be:	8c e0       	ldi	r24, 0x0C	; 12
     9c0:	0e 94 ba 05 	call	0xb74	; 0xb74 <usart_init>
	init_display(); 
     9c4:	0e 94 17 03 	call	0x62e	; 0x62e <init_display>
	sei(); 
     9c8:	78 94       	sei
	elapsed = false;
     9ca:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <elapsed>
	
	while(1) {
		
		if (calc) { // Once all 80 samples are taken, we can stop taking samples from ADC
     9ce:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <calc>
     9d2:	88 23       	and	r24, r24
     9d4:	a9 f1       	breq	.+106    	; 0xa40 <main+0x8e>
			
			TCCR0B &= ~(1 << CS01); // stop timer0
     9d6:	85 b5       	in	r24, 0x25	; 37
     9d8:	8d 7f       	andi	r24, 0xFD	; 253
     9da:	85 bd       	out	0x25, r24	; 37
			TCNT0 = 0; // reset timer counter 0
     9dc:	16 bc       	out	0x26, r1	; 38
			convertAdcToVoltages(); // convert from ADC values to voltage
     9de:	0e 94 a3 01 	call	0x346	; 0x346 <convertAdcToVoltages>
			rmsCalculator(); // Calculate Vrms and Irms
     9e2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <rmsCalculator>
			linearApproxPower(); // perform power calculation
     9e6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <linearApproxPower>
			transmit_Vrms(Vrms);
     9ea:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <Vrms>
     9ee:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <Vrms+0x1>
     9f2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Vrms+0x2>
     9f6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Vrms+0x3>
     9fa:	0e 94 ed 05 	call	0xbda	; 0xbda <transmit_Vrms>
			transmit_Irms(Irms);
     9fe:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
     a02:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <__data_end+0x1>
     a06:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end+0x2>
     a0a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__data_end+0x3>
     a0e:	0e 94 1c 06 	call	0xc38	; 0xc38 <transmit_Irms>
			transmit_power(power); 
     a12:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <power>
     a16:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <power+0x1>
     a1a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <power+0x2>
     a1e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <power+0x3>
     a22:	0e 94 51 06 	call	0xca2	; 0xca2 <transmit_power>
			usart_transmit_array("\r\n");
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
			pos = 0; // Reset position for ADC
     a2e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <pos>
			calc = false; // Reset 
     a32:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <calc>
			ADCSRA |= (1 << ADIE);
     a36:	ea e7       	ldi	r30, 0x7A	; 122
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	88 60       	ori	r24, 0x08	; 8
     a3e:	80 83       	st	Z, r24
			
		}
		// Load values to display
		if(elapsed) {
     a40:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <elapsed>
     a44:	88 23       	and	r24, r24
     a46:	19 f2       	breq	.-122    	; 0x9ce <main+0x1c>
			TCCR0B |= (1 << CS01); // start timer0
     a48:	85 b5       	in	r24, 0x25	; 37
     a4a:	82 60       	ori	r24, 0x02	; 2
     a4c:	85 bd       	out	0x25, r24	; 37
			switch(iteration) {
     a4e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <iteration>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	91 f0       	breq	.+36     	; 0xa7a <main+0xc8>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	d9 f0       	breq	.+54     	; 0xa90 <main+0xde>
     a5a:	81 11       	cpse	r24, r1
     a5c:	26 c0       	rjmp	.+76     	; 0xaaa <main+0xf8>
				case 0:
				PORTB |= (1 << PINB5);
     a5e:	85 b1       	in	r24, 0x05	; 5
     a60:	80 62       	ori	r24, 0x20	; 32
     a62:	85 b9       	out	0x05, r24	; 5
				seperate_and_load_voltage(Vrms); // load voltage value to be displayed
     a64:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <Vrms>
     a68:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <Vrms+0x1>
     a6c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Vrms+0x2>
     a70:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Vrms+0x3>
     a74:	0e 94 21 03 	call	0x642	; 0x642 <seperate_and_load_voltage>
				break;
     a78:	18 c0       	rjmp	.+48     	; 0xaaa <main+0xf8>
				case 1:
				seperate_and_load_current(Irms); // load current value to be displayed
     a7a:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <__data_end>
     a7e:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <__data_end+0x1>
     a82:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end+0x2>
     a86:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__data_end+0x3>
     a8a:	0e 94 a0 03 	call	0x740	; 0x740 <seperate_and_load_current>
				break;
     a8e:	0d c0       	rjmp	.+26     	; 0xaaa <main+0xf8>
				case 2:
				seperate_and_load_power(power); // load power value to be displayed
     a90:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <power>
     a94:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <power+0x1>
     a98:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <power+0x2>
     a9c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <power+0x3>
     aa0:	0e 94 21 04 	call	0x842	; 0x842 <seperate_and_load_power>
				iteration = -1; // reset iteration to display voltage after power
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <iteration>
				break;
			}
			iteration++; // increment iteration
     aaa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <iteration>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <iteration>
			elapsed = false; // reset elapsed
     ab4:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <elapsed>
     ab8:	8a cf       	rjmp	.-236    	; 0x9ce <main+0x1c>

00000aba <timer0_init>:
volatile uint8_t elapsed = 0;
volatile uint8_t count = 0;

// Configuration generates interrupt every 0.1ms (For triggering ADC) 
void timer0_init() {
	TCCR0A |= (1 << WGM01); // Sets to CTC mode
     aba:	84 b5       	in	r24, 0x24	; 36
     abc:	82 60       	ori	r24, 0x02	; 2
     abe:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01); // Sets prescaler to 8
     ac0:	85 b5       	in	r24, 0x25	; 37
     ac2:	82 60       	ori	r24, 0x02	; 2
     ac4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 24; // Output compare match register set to 24 (25 counts)
     ac6:	88 e1       	ldi	r24, 0x18	; 24
     ac8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); // Enables interrupt for compare match A
     aca:	ee e6       	ldi	r30, 0x6E	; 110
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	80 83       	st	Z, r24
	
	// Timer counter 1 for display refresh EVERY 10ms
	TCCR1B |= (1 << WGM12) | (1 << CS12); // set to CTC mode (top of OCR1A) and set prescaler to 256 to get event every ~10ms 
     ad4:	e1 e8       	ldi	r30, 0x81	; 129
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8c 60       	ori	r24, 0x0C	; 12
     adc:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12); // Set prescaler to 256
     ade:	80 81       	ld	r24, Z
     ae0:	84 60       	ori	r24, 0x04	; 4
     ae2:	80 83       	st	Z, r24
	OCR1A = 45; // 78 clock cycles for 10ms
     ae4:	8d e2       	ldi	r24, 0x2D	; 45
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     aec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); // Enable interrupt for compare match A
     af0:	ef e6       	ldi	r30, 0x6F	; 111
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	80 83       	st	Z, r24
     afa:	08 95       	ret

00000afc <__vector_14>:
}


ISR(TIMER0_COMPA_vect) { 
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
}
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_11>:

// Will go off every ~10ms to refresh display, and after ~1s, change value to be displayed
ISR(TIMER1_COMPA_vect) {
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
	send_next_character_to_display(); // refresh display with loaded value
     b32:	0e 94 88 04 	call	0x910	; 0x910 <send_next_character_to_display>
	if(count == 100) {
     b36:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <count>
     b3a:	84 36       	cpi	r24, 0x64	; 100
     b3c:	29 f4       	brne	.+10     	; 0xb48 <__vector_11+0x38>
		elapsed = 1; // after 1 second, load next value (voltage, current, power)
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <elapsed>
		count = 0; // reset count
     b44:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <count>
	}
	count++;
     b48:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <count>
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <count>
}
     b52:	ff 91       	pop	r31
     b54:	ef 91       	pop	r30
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <usart_init>:
#include <stdio.h>
#include <string.h>


void usart_init(uint8_t ubrr) {
	UBRR0H = (unsigned char) (ubrr >> 8);
     b74:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (ubrr);
     b78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << TXEN0); // Enabling transmit
     b7c:	e1 ec       	ldi	r30, 0xC1	; 193
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Enables UART (async) mode, no parity, 1 stop bit, 8 data bits
     b86:	e2 ec       	ldi	r30, 0xC2	; 194
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	86 60       	ori	r24, 0x06	; 6
     b8e:	80 83       	st	Z, r24
     b90:	08 95       	ret

00000b92 <usart_transmit>:
	for (uint8_t i = 0; i < strlen(msg); i++)
	usart_transmit(msg[i]); // transmits every character in string message
}

void usart_transmit(char byte) { // Function transmits one byte/ char
	while (!(UCSR0A & (1 << UDRE0))); // Checking if UDR0 is empty
     b92:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b96:	95 ff       	sbrs	r25, 5
     b98:	fc cf       	rjmp	.-8      	; 0xb92 <usart_transmit>
	UDR0 = byte; // Putting data to be sent by UDR0 register
     b9a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b9e:	08 95       	ret

00000ba0 <usart_transmit_array>:
	UBRR0L = (unsigned char) (ubrr);
	UCSR0B |= (1 << TXEN0); // Enabling transmit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Enables UART (async) mode, no parity, 1 stop bit, 8 data bits
}

void usart_transmit_array(char* msg) { // Transmitting array of characters
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < strlen(msg); i++)
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	07 c0       	rjmp	.+14     	; 0xbba <usart_transmit_array+0x1a>
	usart_transmit(msg[i]); // transmits every character in string message
     bac:	fe 01       	movw	r30, r28
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	80 81       	ld	r24, Z
     bb4:	0e 94 c9 05 	call	0xb92	; 0xb92 <usart_transmit>
	UCSR0B |= (1 << TXEN0); // Enabling transmit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Enables UART (async) mode, no parity, 1 stop bit, 8 data bits
}

void usart_transmit_array(char* msg) { // Transmitting array of characters
	for (uint8_t i = 0; i < strlen(msg); i++)
     bb8:	1f 5f       	subi	r17, 0xFF	; 255
     bba:	81 2f       	mov	r24, r17
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fe 01       	movw	r30, r28
     bc0:	01 90       	ld	r0, Z+
     bc2:	00 20       	and	r0, r0
     bc4:	e9 f7       	brne	.-6      	; 0xbc0 <usart_transmit_array+0x20>
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	ec 1b       	sub	r30, r28
     bca:	fd 0b       	sbc	r31, r29
     bcc:	8e 17       	cp	r24, r30
     bce:	9f 07       	cpc	r25, r31
     bd0:	68 f3       	brcs	.-38     	; 0xbac <usart_transmit_array+0xc>
	usart_transmit(msg[i]); // transmits every character in string message
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	08 95       	ret

00000bda <transmit_Vrms>:
void usart_transmit(char byte) { // Function transmits one byte/ char
	while (!(UCSR0A & (1 << UDRE0))); // Checking if UDR0 is empty
	UDR0 = byte; // Putting data to be sent by UDR0 register
}

void transmit_Vrms(float Vrms) {
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	28 97       	sbiw	r28, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
	char voltage[8];
	dtostrf(Vrms,-4,1,voltage); // convert float to string
     bf2:	8e 01       	movw	r16, r28
     bf4:	0f 5f       	subi	r16, 0xFF	; 255
     bf6:	1f 4f       	sbci	r17, 0xFF	; 255
     bf8:	21 e0       	ldi	r18, 0x01	; 1
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	4c ef       	ldi	r20, 0xFC	; 252
     bfe:	5f ef       	ldi	r21, 0xFF	; 255
     c00:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <dtostrf>
	usart_transmit_array("RMS Voltage is: ");
     c04:	8d e0       	ldi	r24, 0x0D	; 13
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array(voltage); // transmit to terminal
     c0c:	c8 01       	movw	r24, r16
     c0e:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array("Vrms"); // units
     c12:	8e e1       	ldi	r24, 0x1E	; 30
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array("\r\n");
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
}
     c22:	28 96       	adiw	r28, 0x08	; 8
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <transmit_Irms>:

void transmit_Irms(float Irms) {
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	28 97       	sbiw	r28, 0x08	; 8
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
	Irms *= 1000; // convert to mA
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	4a e7       	ldi	r20, 0x7A	; 122
     c56:	54 e4       	ldi	r21, 0x44	; 68
     c58:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
	char current[8];
	dtostrf(Irms,-3,0,current); // convert float to string, store in array
     c5c:	8e 01       	movw	r16, r28
     c5e:	0f 5f       	subi	r16, 0xFF	; 255
     c60:	1f 4f       	sbci	r17, 0xFF	; 255
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	4d ef       	ldi	r20, 0xFD	; 253
     c68:	5f ef       	ldi	r21, 0xFF	; 255
     c6a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <dtostrf>
	usart_transmit_array("RMS Current is: ");
     c6e:	83 e2       	ldi	r24, 0x23	; 35
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array(current); // transmit to terminal
     c76:	c8 01       	movw	r24, r16
     c78:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array("mArms");
     c7c:	84 e3       	ldi	r24, 0x34	; 52
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array("\r\n");
     c84:	8a e0       	ldi	r24, 0x0A	; 10
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
}
     c8c:	28 96       	adiw	r28, 0x08	; 8
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <transmit_power>:

void transmit_power(float w) {
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	28 97       	sbiw	r28, 0x08	; 8
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
	char power[8];
	dtostrf(w,-3,2,power); // convert float to string, store in array
     cba:	8e 01       	movw	r16, r28
     cbc:	0f 5f       	subi	r16, 0xFF	; 255
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	4d ef       	ldi	r20, 0xFD	; 253
     cc6:	5f ef       	ldi	r21, 0xFF	; 255
     cc8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <dtostrf>
	usart_transmit_array("Power is: ");
     ccc:	8a e3       	ldi	r24, 0x3A	; 58
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit_array(power); // transmit to terminal
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
	usart_transmit('W');
     cda:	87 e5       	ldi	r24, 0x57	; 87
     cdc:	0e 94 c9 05 	call	0xb92	; 0xb92 <usart_transmit>
	usart_transmit_array("\r\n");
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 d0 05 	call	0xba0	; 0xba0 <usart_transmit_array>
     ce8:	28 96       	adiw	r28, 0x08	; 8
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <__subsf3>:
     cfe:	50 58       	subi	r21, 0x80	; 128

00000d00 <__addsf3>:
     d00:	bb 27       	eor	r27, r27
     d02:	aa 27       	eor	r26, r26
     d04:	0e 94 97 06 	call	0xd2e	; 0xd2e <__addsf3x>
     d08:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_round>
     d0c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_pscA>
     d10:	38 f0       	brcs	.+14     	; 0xd20 <__addsf3+0x20>
     d12:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscB>
     d16:	20 f0       	brcs	.+8      	; 0xd20 <__addsf3+0x20>
     d18:	39 f4       	brne	.+14     	; 0xd28 <__addsf3+0x28>
     d1a:	9f 3f       	cpi	r25, 0xFF	; 255
     d1c:	19 f4       	brne	.+6      	; 0xd24 <__addsf3+0x24>
     d1e:	26 f4       	brtc	.+8      	; 0xd28 <__addsf3+0x28>
     d20:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>
     d24:	0e f4       	brtc	.+2      	; 0xd28 <__addsf3+0x28>
     d26:	e0 95       	com	r30
     d28:	e7 fb       	bst	r30, 7
     d2a:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>

00000d2e <__addsf3x>:
     d2e:	e9 2f       	mov	r30, r25
     d30:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_split3>
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__addsf3+0xc>
     d36:	ba 17       	cp	r27, r26
     d38:	62 07       	cpc	r22, r18
     d3a:	73 07       	cpc	r23, r19
     d3c:	84 07       	cpc	r24, r20
     d3e:	95 07       	cpc	r25, r21
     d40:	20 f0       	brcs	.+8      	; 0xd4a <__addsf3x+0x1c>
     d42:	79 f4       	brne	.+30     	; 0xd62 <__addsf3x+0x34>
     d44:	a6 f5       	brtc	.+104    	; 0xdae <__addsf3x+0x80>
     d46:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_zero>
     d4a:	0e f4       	brtc	.+2      	; 0xd4e <__addsf3x+0x20>
     d4c:	e0 95       	com	r30
     d4e:	0b 2e       	mov	r0, r27
     d50:	ba 2f       	mov	r27, r26
     d52:	a0 2d       	mov	r26, r0
     d54:	0b 01       	movw	r0, r22
     d56:	b9 01       	movw	r22, r18
     d58:	90 01       	movw	r18, r0
     d5a:	0c 01       	movw	r0, r24
     d5c:	ca 01       	movw	r24, r20
     d5e:	a0 01       	movw	r20, r0
     d60:	11 24       	eor	r1, r1
     d62:	ff 27       	eor	r31, r31
     d64:	59 1b       	sub	r21, r25
     d66:	99 f0       	breq	.+38     	; 0xd8e <__addsf3x+0x60>
     d68:	59 3f       	cpi	r21, 0xF9	; 249
     d6a:	50 f4       	brcc	.+20     	; 0xd80 <__addsf3x+0x52>
     d6c:	50 3e       	cpi	r21, 0xE0	; 224
     d6e:	68 f1       	brcs	.+90     	; 0xdca <__addsf3x+0x9c>
     d70:	1a 16       	cp	r1, r26
     d72:	f0 40       	sbci	r31, 0x00	; 0
     d74:	a2 2f       	mov	r26, r18
     d76:	23 2f       	mov	r18, r19
     d78:	34 2f       	mov	r19, r20
     d7a:	44 27       	eor	r20, r20
     d7c:	58 5f       	subi	r21, 0xF8	; 248
     d7e:	f3 cf       	rjmp	.-26     	; 0xd66 <__addsf3x+0x38>
     d80:	46 95       	lsr	r20
     d82:	37 95       	ror	r19
     d84:	27 95       	ror	r18
     d86:	a7 95       	ror	r26
     d88:	f0 40       	sbci	r31, 0x00	; 0
     d8a:	53 95       	inc	r21
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <__addsf3x+0x52>
     d8e:	7e f4       	brtc	.+30     	; 0xdae <__addsf3x+0x80>
     d90:	1f 16       	cp	r1, r31
     d92:	ba 0b       	sbc	r27, r26
     d94:	62 0b       	sbc	r22, r18
     d96:	73 0b       	sbc	r23, r19
     d98:	84 0b       	sbc	r24, r20
     d9a:	ba f0       	brmi	.+46     	; 0xdca <__addsf3x+0x9c>
     d9c:	91 50       	subi	r25, 0x01	; 1
     d9e:	a1 f0       	breq	.+40     	; 0xdc8 <__addsf3x+0x9a>
     da0:	ff 0f       	add	r31, r31
     da2:	bb 1f       	adc	r27, r27
     da4:	66 1f       	adc	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	88 1f       	adc	r24, r24
     daa:	c2 f7       	brpl	.-16     	; 0xd9c <__addsf3x+0x6e>
     dac:	0e c0       	rjmp	.+28     	; 0xdca <__addsf3x+0x9c>
     dae:	ba 0f       	add	r27, r26
     db0:	62 1f       	adc	r22, r18
     db2:	73 1f       	adc	r23, r19
     db4:	84 1f       	adc	r24, r20
     db6:	48 f4       	brcc	.+18     	; 0xdca <__addsf3x+0x9c>
     db8:	87 95       	ror	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f7 95       	ror	r31
     dc2:	9e 3f       	cpi	r25, 0xFE	; 254
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <__addsf3x+0x9a>
     dc6:	b0 cf       	rjmp	.-160    	; 0xd28 <__addsf3+0x28>
     dc8:	93 95       	inc	r25
     dca:	88 0f       	add	r24, r24
     dcc:	08 f0       	brcs	.+2      	; 0xdd0 <__addsf3x+0xa2>
     dce:	99 27       	eor	r25, r25
     dd0:	ee 0f       	add	r30, r30
     dd2:	97 95       	ror	r25
     dd4:	87 95       	ror	r24
     dd6:	08 95       	ret

00000dd8 <__divsf3>:
     dd8:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3x>
     ddc:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_round>
     de0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscB>
     de4:	58 f0       	brcs	.+22     	; 0xdfc <__divsf3+0x24>
     de6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_pscA>
     dea:	40 f0       	brcs	.+16     	; 0xdfc <__divsf3+0x24>
     dec:	29 f4       	brne	.+10     	; 0xdf8 <__divsf3+0x20>
     dee:	5f 3f       	cpi	r21, 0xFF	; 255
     df0:	29 f0       	breq	.+10     	; 0xdfc <__divsf3+0x24>
     df2:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
     df6:	51 11       	cpse	r21, r1
     df8:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_szero>
     dfc:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>

00000e00 <__divsf3x>:
     e00:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_split3>
     e04:	68 f3       	brcs	.-38     	; 0xde0 <__divsf3+0x8>

00000e06 <__divsf3_pse>:
     e06:	99 23       	and	r25, r25
     e08:	b1 f3       	breq	.-20     	; 0xdf6 <__divsf3+0x1e>
     e0a:	55 23       	and	r21, r21
     e0c:	91 f3       	breq	.-28     	; 0xdf2 <__divsf3+0x1a>
     e0e:	95 1b       	sub	r25, r21
     e10:	55 0b       	sbc	r21, r21
     e12:	bb 27       	eor	r27, r27
     e14:	aa 27       	eor	r26, r26
     e16:	62 17       	cp	r22, r18
     e18:	73 07       	cpc	r23, r19
     e1a:	84 07       	cpc	r24, r20
     e1c:	38 f0       	brcs	.+14     	; 0xe2c <__divsf3_pse+0x26>
     e1e:	9f 5f       	subi	r25, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	44 1f       	adc	r20, r20
     e28:	aa 1f       	adc	r26, r26
     e2a:	a9 f3       	breq	.-22     	; 0xe16 <__divsf3_pse+0x10>
     e2c:	35 d0       	rcall	.+106    	; 0xe98 <__divsf3_pse+0x92>
     e2e:	0e 2e       	mov	r0, r30
     e30:	3a f0       	brmi	.+14     	; 0xe40 <__divsf3_pse+0x3a>
     e32:	e0 e8       	ldi	r30, 0x80	; 128
     e34:	32 d0       	rcall	.+100    	; 0xe9a <__divsf3_pse+0x94>
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	50 40       	sbci	r21, 0x00	; 0
     e3a:	e6 95       	lsr	r30
     e3c:	00 1c       	adc	r0, r0
     e3e:	ca f7       	brpl	.-14     	; 0xe32 <__divsf3_pse+0x2c>
     e40:	2b d0       	rcall	.+86     	; 0xe98 <__divsf3_pse+0x92>
     e42:	fe 2f       	mov	r31, r30
     e44:	29 d0       	rcall	.+82     	; 0xe98 <__divsf3_pse+0x92>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	88 1f       	adc	r24, r24
     e4c:	bb 1f       	adc	r27, r27
     e4e:	26 17       	cp	r18, r22
     e50:	37 07       	cpc	r19, r23
     e52:	48 07       	cpc	r20, r24
     e54:	ab 07       	cpc	r26, r27
     e56:	b0 e8       	ldi	r27, 0x80	; 128
     e58:	09 f0       	breq	.+2      	; 0xe5c <__divsf3_pse+0x56>
     e5a:	bb 0b       	sbc	r27, r27
     e5c:	80 2d       	mov	r24, r0
     e5e:	bf 01       	movw	r22, r30
     e60:	ff 27       	eor	r31, r31
     e62:	93 58       	subi	r25, 0x83	; 131
     e64:	5f 4f       	sbci	r21, 0xFF	; 255
     e66:	3a f0       	brmi	.+14     	; 0xe76 <__divsf3_pse+0x70>
     e68:	9e 3f       	cpi	r25, 0xFE	; 254
     e6a:	51 05       	cpc	r21, r1
     e6c:	78 f0       	brcs	.+30     	; 0xe8c <__divsf3_pse+0x86>
     e6e:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
     e72:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_szero>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	e4 f3       	brlt	.-8      	; 0xe72 <__divsf3_pse+0x6c>
     e7a:	98 3e       	cpi	r25, 0xE8	; 232
     e7c:	d4 f3       	brlt	.-12     	; 0xe72 <__divsf3_pse+0x6c>
     e7e:	86 95       	lsr	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	f7 95       	ror	r31
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__divsf3_pse+0x78>
     e8c:	88 0f       	add	r24, r24
     e8e:	91 1d       	adc	r25, r1
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret
     e98:	e1 e0       	ldi	r30, 0x01	; 1
     e9a:	66 0f       	add	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	bb 1f       	adc	r27, r27
     ea2:	62 17       	cp	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	ba 07       	cpc	r27, r26
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__divsf3_pse+0xae>
     eac:	62 1b       	sub	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	ba 0b       	sbc	r27, r26
     eb4:	ee 1f       	adc	r30, r30
     eb6:	88 f7       	brcc	.-30     	; 0xe9a <__divsf3_pse+0x94>
     eb8:	e0 95       	com	r30
     eba:	08 95       	ret

00000ebc <__fixunssfsi>:
     ebc:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_splitA>
     ec0:	88 f0       	brcs	.+34     	; 0xee4 <__fixunssfsi+0x28>
     ec2:	9f 57       	subi	r25, 0x7F	; 127
     ec4:	98 f0       	brcs	.+38     	; 0xeec <__fixunssfsi+0x30>
     ec6:	b9 2f       	mov	r27, r25
     ec8:	99 27       	eor	r25, r25
     eca:	b7 51       	subi	r27, 0x17	; 23
     ecc:	b0 f0       	brcs	.+44     	; 0xefa <__fixunssfsi+0x3e>
     ece:	e1 f0       	breq	.+56     	; 0xf08 <__fixunssfsi+0x4c>
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	1a f0       	brmi	.+6      	; 0xee0 <__fixunssfsi+0x24>
     eda:	ba 95       	dec	r27
     edc:	c9 f7       	brne	.-14     	; 0xed0 <__fixunssfsi+0x14>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <__fixunssfsi+0x4c>
     ee0:	b1 30       	cpi	r27, 0x01	; 1
     ee2:	91 f0       	breq	.+36     	; 0xf08 <__fixunssfsi+0x4c>
     ee4:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_zero>
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	08 95       	ret
     eec:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_zero>
     ef0:	67 2f       	mov	r22, r23
     ef2:	78 2f       	mov	r23, r24
     ef4:	88 27       	eor	r24, r24
     ef6:	b8 5f       	subi	r27, 0xF8	; 248
     ef8:	39 f0       	breq	.+14     	; 0xf08 <__fixunssfsi+0x4c>
     efa:	b9 3f       	cpi	r27, 0xF9	; 249
     efc:	cc f3       	brlt	.-14     	; 0xef0 <__fixunssfsi+0x34>
     efe:	86 95       	lsr	r24
     f00:	77 95       	ror	r23
     f02:	67 95       	ror	r22
     f04:	b3 95       	inc	r27
     f06:	d9 f7       	brne	.-10     	; 0xefe <__fixunssfsi+0x42>
     f08:	3e f4       	brtc	.+14     	; 0xf18 <__fixunssfsi+0x5c>
     f0a:	90 95       	com	r25
     f0c:	80 95       	com	r24
     f0e:	70 95       	com	r23
     f10:	61 95       	neg	r22
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	08 95       	ret

00000f1a <__floatunsisf>:
     f1a:	e8 94       	clt
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <__floatsisf+0x12>

00000f1e <__floatsisf>:
     f1e:	97 fb       	bst	r25, 7
     f20:	3e f4       	brtc	.+14     	; 0xf30 <__floatsisf+0x12>
     f22:	90 95       	com	r25
     f24:	80 95       	com	r24
     f26:	70 95       	com	r23
     f28:	61 95       	neg	r22
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	99 23       	and	r25, r25
     f32:	a9 f0       	breq	.+42     	; 0xf5e <__floatsisf+0x40>
     f34:	f9 2f       	mov	r31, r25
     f36:	96 e9       	ldi	r25, 0x96	; 150
     f38:	bb 27       	eor	r27, r27
     f3a:	93 95       	inc	r25
     f3c:	f6 95       	lsr	r31
     f3e:	87 95       	ror	r24
     f40:	77 95       	ror	r23
     f42:	67 95       	ror	r22
     f44:	b7 95       	ror	r27
     f46:	f1 11       	cpse	r31, r1
     f48:	f8 cf       	rjmp	.-16     	; 0xf3a <__floatsisf+0x1c>
     f4a:	fa f4       	brpl	.+62     	; 0xf8a <__floatsisf+0x6c>
     f4c:	bb 0f       	add	r27, r27
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__floatsisf+0x36>
     f50:	60 ff       	sbrs	r22, 0
     f52:	1b c0       	rjmp	.+54     	; 0xf8a <__floatsisf+0x6c>
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	16 c0       	rjmp	.+44     	; 0xf8a <__floatsisf+0x6c>
     f5e:	88 23       	and	r24, r24
     f60:	11 f0       	breq	.+4      	; 0xf66 <__floatsisf+0x48>
     f62:	96 e9       	ldi	r25, 0x96	; 150
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <__floatsisf+0x6a>
     f66:	77 23       	and	r23, r23
     f68:	21 f0       	breq	.+8      	; 0xf72 <__floatsisf+0x54>
     f6a:	9e e8       	ldi	r25, 0x8E	; 142
     f6c:	87 2f       	mov	r24, r23
     f6e:	76 2f       	mov	r23, r22
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <__floatsisf+0x5e>
     f72:	66 23       	and	r22, r22
     f74:	71 f0       	breq	.+28     	; 0xf92 <__floatsisf+0x74>
     f76:	96 e8       	ldi	r25, 0x86	; 134
     f78:	86 2f       	mov	r24, r22
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	2a f0       	brmi	.+10     	; 0xf8a <__floatsisf+0x6c>
     f80:	9a 95       	dec	r25
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	da f7       	brpl	.-10     	; 0xf80 <__floatsisf+0x62>
     f8a:	88 0f       	add	r24, r24
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__fp_inf>:
     f94:	97 f9       	bld	r25, 7
     f96:	9f 67       	ori	r25, 0x7F	; 127
     f98:	80 e8       	ldi	r24, 0x80	; 128
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <__fp_nan>:
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	80 ec       	ldi	r24, 0xC0	; 192
     fa4:	08 95       	ret

00000fa6 <__fp_pscA>:
     fa6:	00 24       	eor	r0, r0
     fa8:	0a 94       	dec	r0
     faa:	16 16       	cp	r1, r22
     fac:	17 06       	cpc	r1, r23
     fae:	18 06       	cpc	r1, r24
     fb0:	09 06       	cpc	r0, r25
     fb2:	08 95       	ret

00000fb4 <__fp_pscB>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	14 06       	cpc	r1, r20
     fbe:	05 06       	cpc	r0, r21
     fc0:	08 95       	ret

00000fc2 <__fp_round>:
     fc2:	09 2e       	mov	r0, r25
     fc4:	03 94       	inc	r0
     fc6:	00 0c       	add	r0, r0
     fc8:	11 f4       	brne	.+4      	; 0xfce <__fp_round+0xc>
     fca:	88 23       	and	r24, r24
     fcc:	52 f0       	brmi	.+20     	; 0xfe2 <__fp_round+0x20>
     fce:	bb 0f       	add	r27, r27
     fd0:	40 f4       	brcc	.+16     	; 0xfe2 <__fp_round+0x20>
     fd2:	bf 2b       	or	r27, r31
     fd4:	11 f4       	brne	.+4      	; 0xfda <__fp_round+0x18>
     fd6:	60 ff       	sbrs	r22, 0
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <__fp_round+0x20>
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <__fp_split3>:
     fe4:	57 fd       	sbrc	r21, 7
     fe6:	90 58       	subi	r25, 0x80	; 128
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	59 f0       	breq	.+22     	; 0x1004 <__fp_splitA+0x10>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	71 f0       	breq	.+28     	; 0x100e <__fp_splitA+0x1a>
     ff2:	47 95       	ror	r20

00000ff4 <__fp_splitA>:
     ff4:	88 0f       	add	r24, r24
     ff6:	97 fb       	bst	r25, 7
     ff8:	99 1f       	adc	r25, r25
     ffa:	61 f0       	breq	.+24     	; 0x1014 <__fp_splitA+0x20>
     ffc:	9f 3f       	cpi	r25, 0xFF	; 255
     ffe:	79 f0       	breq	.+30     	; 0x101e <__fp_splitA+0x2a>
    1000:	87 95       	ror	r24
    1002:	08 95       	ret
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	14 06       	cpc	r1, r20
    100a:	55 1f       	adc	r21, r21
    100c:	f2 cf       	rjmp	.-28     	; 0xff2 <__fp_split3+0xe>
    100e:	46 95       	lsr	r20
    1010:	f1 df       	rcall	.-30     	; 0xff4 <__fp_splitA>
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <__fp_splitA+0x30>
    1014:	16 16       	cp	r1, r22
    1016:	17 06       	cpc	r1, r23
    1018:	18 06       	cpc	r1, r24
    101a:	99 1f       	adc	r25, r25
    101c:	f1 cf       	rjmp	.-30     	; 0x1000 <__fp_splitA+0xc>
    101e:	86 95       	lsr	r24
    1020:	71 05       	cpc	r23, r1
    1022:	61 05       	cpc	r22, r1
    1024:	08 94       	sec
    1026:	08 95       	ret

00001028 <__fp_zero>:
    1028:	e8 94       	clt

0000102a <__fp_szero>:
    102a:	bb 27       	eor	r27, r27
    102c:	66 27       	eor	r22, r22
    102e:	77 27       	eor	r23, r23
    1030:	cb 01       	movw	r24, r22
    1032:	97 f9       	bld	r25, 7
    1034:	08 95       	ret

00001036 <__mulsf3>:
    1036:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
    103a:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_round>
    103e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_pscA>
    1042:	38 f0       	brcs	.+14     	; 0x1052 <__mulsf3+0x1c>
    1044:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscB>
    1048:	20 f0       	brcs	.+8      	; 0x1052 <__mulsf3+0x1c>
    104a:	95 23       	and	r25, r21
    104c:	11 f0       	breq	.+4      	; 0x1052 <__mulsf3+0x1c>
    104e:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
    1052:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>
    1056:	11 24       	eor	r1, r1
    1058:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_szero>

0000105c <__mulsf3x>:
    105c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_split3>
    1060:	70 f3       	brcs	.-36     	; 0x103e <__mulsf3+0x8>

00001062 <__mulsf3_pse>:
    1062:	95 9f       	mul	r25, r21
    1064:	c1 f3       	breq	.-16     	; 0x1056 <__mulsf3+0x20>
    1066:	95 0f       	add	r25, r21
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	55 1f       	adc	r21, r21
    106c:	62 9f       	mul	r22, r18
    106e:	f0 01       	movw	r30, r0
    1070:	72 9f       	mul	r23, r18
    1072:	bb 27       	eor	r27, r27
    1074:	f0 0d       	add	r31, r0
    1076:	b1 1d       	adc	r27, r1
    1078:	63 9f       	mul	r22, r19
    107a:	aa 27       	eor	r26, r26
    107c:	f0 0d       	add	r31, r0
    107e:	b1 1d       	adc	r27, r1
    1080:	aa 1f       	adc	r26, r26
    1082:	64 9f       	mul	r22, r20
    1084:	66 27       	eor	r22, r22
    1086:	b0 0d       	add	r27, r0
    1088:	a1 1d       	adc	r26, r1
    108a:	66 1f       	adc	r22, r22
    108c:	82 9f       	mul	r24, r18
    108e:	22 27       	eor	r18, r18
    1090:	b0 0d       	add	r27, r0
    1092:	a1 1d       	adc	r26, r1
    1094:	62 1f       	adc	r22, r18
    1096:	73 9f       	mul	r23, r19
    1098:	b0 0d       	add	r27, r0
    109a:	a1 1d       	adc	r26, r1
    109c:	62 1f       	adc	r22, r18
    109e:	83 9f       	mul	r24, r19
    10a0:	a0 0d       	add	r26, r0
    10a2:	61 1d       	adc	r22, r1
    10a4:	22 1f       	adc	r18, r18
    10a6:	74 9f       	mul	r23, r20
    10a8:	33 27       	eor	r19, r19
    10aa:	a0 0d       	add	r26, r0
    10ac:	61 1d       	adc	r22, r1
    10ae:	23 1f       	adc	r18, r19
    10b0:	84 9f       	mul	r24, r20
    10b2:	60 0d       	add	r22, r0
    10b4:	21 1d       	adc	r18, r1
    10b6:	82 2f       	mov	r24, r18
    10b8:	76 2f       	mov	r23, r22
    10ba:	6a 2f       	mov	r22, r26
    10bc:	11 24       	eor	r1, r1
    10be:	9f 57       	subi	r25, 0x7F	; 127
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	9a f0       	brmi	.+38     	; 0x10ea <__mulsf3_pse+0x88>
    10c4:	f1 f0       	breq	.+60     	; 0x1102 <__mulsf3_pse+0xa0>
    10c6:	88 23       	and	r24, r24
    10c8:	4a f0       	brmi	.+18     	; 0x10dc <__mulsf3_pse+0x7a>
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	bb 1f       	adc	r27, r27
    10d0:	66 1f       	adc	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	91 50       	subi	r25, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	a9 f7       	brne	.-22     	; 0x10c6 <__mulsf3_pse+0x64>
    10dc:	9e 3f       	cpi	r25, 0xFE	; 254
    10de:	51 05       	cpc	r21, r1
    10e0:	80 f0       	brcs	.+32     	; 0x1102 <__mulsf3_pse+0xa0>
    10e2:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
    10e6:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_szero>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	e4 f3       	brlt	.-8      	; 0x10e6 <__mulsf3_pse+0x84>
    10ee:	98 3e       	cpi	r25, 0xE8	; 232
    10f0:	d4 f3       	brlt	.-12     	; 0x10e6 <__mulsf3_pse+0x84>
    10f2:	86 95       	lsr	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	f7 95       	ror	r31
    10fc:	e7 95       	ror	r30
    10fe:	9f 5f       	subi	r25, 0xFF	; 255
    1100:	c1 f7       	brne	.-16     	; 0x10f2 <__mulsf3_pse+0x90>
    1102:	fe 2b       	or	r31, r30
    1104:	88 0f       	add	r24, r24
    1106:	91 1d       	adc	r25, r1
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	97 f9       	bld	r25, 7
    110e:	08 95       	ret

00001110 <pow>:
    1110:	fa 01       	movw	r30, r20
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	30 96       	adiw	r30, 0x00	; 0
    1118:	21 05       	cpc	r18, r1
    111a:	31 05       	cpc	r19, r1
    111c:	a1 f1       	breq	.+104    	; 0x1186 <pow+0x76>
    111e:	61 15       	cp	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	61 f4       	brne	.+24     	; 0x113c <pow+0x2c>
    1124:	80 38       	cpi	r24, 0x80	; 128
    1126:	bf e3       	ldi	r27, 0x3F	; 63
    1128:	9b 07       	cpc	r25, r27
    112a:	49 f1       	breq	.+82     	; 0x117e <pow+0x6e>
    112c:	68 94       	set
    112e:	90 38       	cpi	r25, 0x80	; 128
    1130:	81 05       	cpc	r24, r1
    1132:	61 f0       	breq	.+24     	; 0x114c <pow+0x3c>
    1134:	80 38       	cpi	r24, 0x80	; 128
    1136:	bf ef       	ldi	r27, 0xFF	; 255
    1138:	9b 07       	cpc	r25, r27
    113a:	41 f0       	breq	.+16     	; 0x114c <pow+0x3c>
    113c:	99 23       	and	r25, r25
    113e:	4a f5       	brpl	.+82     	; 0x1192 <pow+0x82>
    1140:	ff 3f       	cpi	r31, 0xFF	; 255
    1142:	e1 05       	cpc	r30, r1
    1144:	31 05       	cpc	r19, r1
    1146:	21 05       	cpc	r18, r1
    1148:	19 f1       	breq	.+70     	; 0x1190 <pow+0x80>
    114a:	e8 94       	clt
    114c:	08 94       	sec
    114e:	e7 95       	ror	r30
    1150:	d9 01       	movw	r26, r18
    1152:	aa 23       	and	r26, r26
    1154:	29 f4       	brne	.+10     	; 0x1160 <pow+0x50>
    1156:	ab 2f       	mov	r26, r27
    1158:	be 2f       	mov	r27, r30
    115a:	f8 5f       	subi	r31, 0xF8	; 248
    115c:	d0 f3       	brcs	.-12     	; 0x1152 <pow+0x42>
    115e:	10 c0       	rjmp	.+32     	; 0x1180 <pow+0x70>
    1160:	ff 5f       	subi	r31, 0xFF	; 255
    1162:	70 f4       	brcc	.+28     	; 0x1180 <pow+0x70>
    1164:	a6 95       	lsr	r26
    1166:	e0 f7       	brcc	.-8      	; 0x1160 <pow+0x50>
    1168:	f7 39       	cpi	r31, 0x97	; 151
    116a:	50 f0       	brcs	.+20     	; 0x1180 <pow+0x70>
    116c:	19 f0       	breq	.+6      	; 0x1174 <pow+0x64>
    116e:	ff 3a       	cpi	r31, 0xAF	; 175
    1170:	38 f4       	brcc	.+14     	; 0x1180 <pow+0x70>
    1172:	9f 77       	andi	r25, 0x7F	; 127
    1174:	9f 93       	push	r25
    1176:	0d d0       	rcall	.+26     	; 0x1192 <pow+0x82>
    1178:	0f 90       	pop	r0
    117a:	07 fc       	sbrc	r0, 7
    117c:	90 58       	subi	r25, 0x80	; 128
    117e:	08 95       	ret
    1180:	46 f0       	brts	.+16     	; 0x1192 <pow+0x82>
    1182:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e8       	ldi	r24, 0x80	; 128
    118c:	9f e3       	ldi	r25, 0x3F	; 63
    118e:	08 95       	ret
    1190:	4f e7       	ldi	r20, 0x7F	; 127
    1192:	9f 77       	andi	r25, 0x7F	; 127
    1194:	5f 93       	push	r21
    1196:	4f 93       	push	r20
    1198:	3f 93       	push	r19
    119a:	2f 93       	push	r18
    119c:	0e 94 de 09 	call	0x13bc	; 0x13bc <log>
    11a0:	2f 91       	pop	r18
    11a2:	3f 91       	pop	r19
    11a4:	4f 91       	pop	r20
    11a6:	5f 91       	pop	r21
    11a8:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
    11ac:	0c 94 26 09 	jmp	0x124c	; 0x124c <exp>
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <pow+0xa8>
    11b2:	16 f4       	brtc	.+4      	; 0x11b8 <pow+0xa8>
    11b4:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>
    11b8:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_mpack>

000011bc <sqrt>:
    11bc:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_splitA>
    11c0:	b8 f3       	brcs	.-18     	; 0x11b0 <pow+0xa0>
    11c2:	99 23       	and	r25, r25
    11c4:	c9 f3       	breq	.-14     	; 0x11b8 <pow+0xa8>
    11c6:	b6 f3       	brts	.-20     	; 0x11b4 <pow+0xa4>
    11c8:	9f 57       	subi	r25, 0x7F	; 127
    11ca:	55 0b       	sbc	r21, r21
    11cc:	87 ff       	sbrs	r24, 7
    11ce:	0e 94 66 09 	call	0x12cc	; 0x12cc <__fp_norm2>
    11d2:	00 24       	eor	r0, r0
    11d4:	a0 e6       	ldi	r26, 0x60	; 96
    11d6:	40 ea       	ldi	r20, 0xA0	; 160
    11d8:	90 01       	movw	r18, r0
    11da:	80 58       	subi	r24, 0x80	; 128
    11dc:	56 95       	lsr	r21
    11de:	97 95       	ror	r25
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <sqrt+0x30>
    11e2:	80 5c       	subi	r24, 0xC0	; 192
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <sqrt+0x38>
    11ec:	26 17       	cp	r18, r22
    11ee:	37 07       	cpc	r19, r23
    11f0:	48 07       	cpc	r20, r24
    11f2:	30 f4       	brcc	.+12     	; 0x1200 <sqrt+0x44>
    11f4:	62 1b       	sub	r22, r18
    11f6:	73 0b       	sbc	r23, r19
    11f8:	84 0b       	sbc	r24, r20
    11fa:	20 29       	or	r18, r0
    11fc:	31 29       	or	r19, r1
    11fe:	4a 2b       	or	r20, r26
    1200:	a6 95       	lsr	r26
    1202:	17 94       	ror	r1
    1204:	07 94       	ror	r0
    1206:	20 25       	eor	r18, r0
    1208:	31 25       	eor	r19, r1
    120a:	4a 27       	eor	r20, r26
    120c:	58 f7       	brcc	.-42     	; 0x11e4 <sqrt+0x28>
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	88 1f       	adc	r24, r24
    1214:	20 f0       	brcs	.+8      	; 0x121e <sqrt+0x62>
    1216:	26 17       	cp	r18, r22
    1218:	37 07       	cpc	r19, r23
    121a:	48 07       	cpc	r20, r24
    121c:	30 f4       	brcc	.+12     	; 0x122a <sqrt+0x6e>
    121e:	62 0b       	sbc	r22, r18
    1220:	73 0b       	sbc	r23, r19
    1222:	84 0b       	sbc	r24, r20
    1224:	20 0d       	add	r18, r0
    1226:	31 1d       	adc	r19, r1
    1228:	41 1d       	adc	r20, r1
    122a:	a0 95       	com	r26
    122c:	81 f7       	brne	.-32     	; 0x120e <sqrt+0x52>
    122e:	b9 01       	movw	r22, r18
    1230:	84 2f       	mov	r24, r20
    1232:	91 58       	subi	r25, 0x81	; 129
    1234:	88 0f       	add	r24, r24
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	08 95       	ret
    123c:	29 f4       	brne	.+10     	; 0x1248 <sqrt+0x8c>
    123e:	16 f0       	brts	.+4      	; 0x1244 <sqrt+0x88>
    1240:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
    1244:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__fp_zero>
    1248:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>

0000124c <exp>:
    124c:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_splitA>
    1250:	a8 f3       	brcs	.-22     	; 0x123c <sqrt+0x80>
    1252:	96 38       	cpi	r25, 0x86	; 134
    1254:	a0 f7       	brcc	.-24     	; 0x123e <sqrt+0x82>
    1256:	07 f8       	bld	r0, 7
    1258:	0f 92       	push	r0
    125a:	e8 94       	clt
    125c:	2b e3       	ldi	r18, 0x3B	; 59
    125e:	3a ea       	ldi	r19, 0xAA	; 170
    1260:	48 eb       	ldi	r20, 0xB8	; 184
    1262:	5f e7       	ldi	r21, 0x7F	; 127
    1264:	0e 94 31 08 	call	0x1062	; 0x1062 <__mulsf3_pse>
    1268:	0f 92       	push	r0
    126a:	0f 92       	push	r0
    126c:	0f 92       	push	r0
    126e:	4d b7       	in	r20, 0x3d	; 61
    1270:	5e b7       	in	r21, 0x3e	; 62
    1272:	0f 92       	push	r0
    1274:	0e 94 26 0a 	call	0x144c	; 0x144c <modf>
    1278:	e8 e6       	ldi	r30, 0x68	; 104
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_powser>
    1280:	4f 91       	pop	r20
    1282:	5f 91       	pop	r21
    1284:	ef 91       	pop	r30
    1286:	ff 91       	pop	r31
    1288:	e5 95       	asr	r30
    128a:	ee 1f       	adc	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	49 f0       	breq	.+18     	; 0x12a2 <exp+0x56>
    1290:	fe 57       	subi	r31, 0x7E	; 126
    1292:	e0 68       	ori	r30, 0x80	; 128
    1294:	44 27       	eor	r20, r20
    1296:	ee 0f       	add	r30, r30
    1298:	44 1f       	adc	r20, r20
    129a:	fa 95       	dec	r31
    129c:	e1 f7       	brne	.-8      	; 0x1296 <exp+0x4a>
    129e:	41 95       	neg	r20
    12a0:	55 0b       	sbc	r21, r21
    12a2:	0e 94 a0 09 	call	0x1340	; 0x1340 <ldexp>
    12a6:	0f 90       	pop	r0
    12a8:	07 fe       	sbrs	r0, 7
    12aa:	0c 94 94 09 	jmp	0x1328	; 0x1328 <inverse>
    12ae:	08 95       	ret

000012b0 <__fp_mpack>:
    12b0:	9f 3f       	cpi	r25, 0xFF	; 255
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <__fp_mpack_finite+0xc>

000012b4 <__fp_mpack_finite>:
    12b4:	91 50       	subi	r25, 0x01	; 1
    12b6:	20 f4       	brcc	.+8      	; 0x12c0 <__fp_mpack_finite+0xc>
    12b8:	87 95       	ror	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	88 0f       	add	r24, r24
    12c2:	91 1d       	adc	r25, r1
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret

000012cc <__fp_norm2>:
    12cc:	91 50       	subi	r25, 0x01	; 1
    12ce:	50 40       	sbci	r21, 0x00	; 0
    12d0:	66 0f       	add	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	88 1f       	adc	r24, r24
    12d6:	d2 f7       	brpl	.-12     	; 0x12cc <__fp_norm2>
    12d8:	08 95       	ret

000012da <__fp_powser>:
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	1f 93       	push	r17
    12e0:	0f 93       	push	r16
    12e2:	ff 92       	push	r15
    12e4:	ef 92       	push	r14
    12e6:	df 92       	push	r13
    12e8:	7b 01       	movw	r14, r22
    12ea:	8c 01       	movw	r16, r24
    12ec:	68 94       	set
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <__fp_powser+0x22>
    12f0:	da 2e       	mov	r13, r26
    12f2:	ef 01       	movw	r28, r30
    12f4:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
    12f8:	fe 01       	movw	r30, r28
    12fa:	e8 94       	clt
    12fc:	a5 91       	lpm	r26, Z+
    12fe:	25 91       	lpm	r18, Z+
    1300:	35 91       	lpm	r19, Z+
    1302:	45 91       	lpm	r20, Z+
    1304:	55 91       	lpm	r21, Z+
    1306:	a6 f3       	brts	.-24     	; 0x12f0 <__fp_powser+0x16>
    1308:	ef 01       	movw	r28, r30
    130a:	0e 94 97 06 	call	0xd2e	; 0xd2e <__addsf3x>
    130e:	fe 01       	movw	r30, r28
    1310:	97 01       	movw	r18, r14
    1312:	a8 01       	movw	r20, r16
    1314:	da 94       	dec	r13
    1316:	69 f7       	brne	.-38     	; 0x12f2 <__fp_powser+0x18>
    1318:	df 90       	pop	r13
    131a:	ef 90       	pop	r14
    131c:	ff 90       	pop	r15
    131e:	0f 91       	pop	r16
    1320:	1f 91       	pop	r17
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <inverse>:
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e8       	ldi	r24, 0x80	; 128
    1332:	9f e3       	ldi	r25, 0x3F	; 63
    1334:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__divsf3>
    1338:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>
    133c:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_mpack>

00001340 <ldexp>:
    1340:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_splitA>
    1344:	d8 f3       	brcs	.-10     	; 0x133c <inverse+0x14>
    1346:	99 23       	and	r25, r25
    1348:	c9 f3       	breq	.-14     	; 0x133c <inverse+0x14>
    134a:	94 0f       	add	r25, r20
    134c:	51 1d       	adc	r21, r1
    134e:	a3 f3       	brvs	.-24     	; 0x1338 <inverse+0x10>
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	94 f0       	brlt	.+36     	; 0x137a <ldexp+0x3a>
    1356:	59 f0       	breq	.+22     	; 0x136e <ldexp+0x2e>
    1358:	88 23       	and	r24, r24
    135a:	32 f0       	brmi	.+12     	; 0x1368 <ldexp+0x28>
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	91 50       	subi	r25, 0x01	; 1
    1364:	50 40       	sbci	r21, 0x00	; 0
    1366:	c1 f7       	brne	.-16     	; 0x1358 <ldexp+0x18>
    1368:	9e 3f       	cpi	r25, 0xFE	; 254
    136a:	51 05       	cpc	r21, r1
    136c:	2c f7       	brge	.-54     	; 0x1338 <inverse+0x10>
    136e:	88 0f       	add	r24, r24
    1370:	91 1d       	adc	r25, r1
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	97 f9       	bld	r25, 7
    1378:	08 95       	ret
    137a:	5f 3f       	cpi	r21, 0xFF	; 255
    137c:	ac f0       	brlt	.+42     	; 0x13a8 <ldexp+0x68>
    137e:	98 3e       	cpi	r25, 0xE8	; 232
    1380:	9c f0       	brlt	.+38     	; 0x13a8 <ldexp+0x68>
    1382:	bb 27       	eor	r27, r27
    1384:	86 95       	lsr	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	08 f4       	brcc	.+2      	; 0x1390 <ldexp+0x50>
    138e:	b1 60       	ori	r27, 0x01	; 1
    1390:	93 95       	inc	r25
    1392:	c1 f7       	brne	.-16     	; 0x1384 <ldexp+0x44>
    1394:	bb 0f       	add	r27, r27
    1396:	58 f7       	brcc	.-42     	; 0x136e <ldexp+0x2e>
    1398:	11 f4       	brne	.+4      	; 0x139e <ldexp+0x5e>
    139a:	60 ff       	sbrs	r22, 0
    139c:	e8 cf       	rjmp	.-48     	; 0x136e <ldexp+0x2e>
    139e:	6f 5f       	subi	r22, 0xFF	; 255
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	e3 cf       	rjmp	.-58     	; 0x136e <ldexp+0x2e>
    13a8:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_szero>
    13ac:	16 f0       	brts	.+4      	; 0x13b2 <ldexp+0x72>
    13ae:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_mpack>
    13b2:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_nan>
    13b6:	68 94       	set
    13b8:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_inf>

000013bc <log>:
    13bc:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_splitA>
    13c0:	a8 f3       	brcs	.-22     	; 0x13ac <ldexp+0x6c>
    13c2:	99 23       	and	r25, r25
    13c4:	c1 f3       	breq	.-16     	; 0x13b6 <ldexp+0x76>
    13c6:	ae f3       	brts	.-22     	; 0x13b2 <ldexp+0x72>
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	1f 93       	push	r17
    13ce:	0f 93       	push	r16
    13d0:	ff 92       	push	r15
    13d2:	c9 2f       	mov	r28, r25
    13d4:	dd 27       	eor	r29, r29
    13d6:	88 23       	and	r24, r24
    13d8:	2a f0       	brmi	.+10     	; 0x13e4 <log+0x28>
    13da:	21 97       	sbiw	r28, 0x01	; 1
    13dc:	66 0f       	add	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	88 1f       	adc	r24, r24
    13e2:	da f7       	brpl	.-10     	; 0x13da <log+0x1e>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f eb       	ldi	r21, 0xBF	; 191
    13ec:	9f e3       	ldi	r25, 0x3F	; 63
    13ee:	88 39       	cpi	r24, 0x98	; 152
    13f0:	20 f0       	brcs	.+8      	; 0x13fa <log+0x3e>
    13f2:	80 3e       	cpi	r24, 0xE0	; 224
    13f4:	38 f0       	brcs	.+14     	; 0x1404 <log+0x48>
    13f6:	21 96       	adiw	r28, 0x01	; 1
    13f8:	8f 77       	andi	r24, 0x7F	; 127
    13fa:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
    13fe:	e0 e9       	ldi	r30, 0x90	; 144
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	04 c0       	rjmp	.+8      	; 0x140c <log+0x50>
    1404:	0e 94 80 06 	call	0xd00	; 0xd00 <__addsf3>
    1408:	ed eb       	ldi	r30, 0xBD	; 189
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_powser>
    1410:	8b 01       	movw	r16, r22
    1412:	be 01       	movw	r22, r28
    1414:	ec 01       	movw	r28, r24
    1416:	fb 2e       	mov	r15, r27
    1418:	6f 57       	subi	r22, 0x7F	; 127
    141a:	71 09       	sbc	r23, r1
    141c:	75 95       	asr	r23
    141e:	77 1f       	adc	r23, r23
    1420:	88 0b       	sbc	r24, r24
    1422:	99 0b       	sbc	r25, r25
    1424:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__floatsisf>
    1428:	28 e1       	ldi	r18, 0x18	; 24
    142a:	32 e7       	ldi	r19, 0x72	; 114
    142c:	41 e3       	ldi	r20, 0x31	; 49
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
    1434:	af 2d       	mov	r26, r15
    1436:	98 01       	movw	r18, r16
    1438:	ae 01       	movw	r20, r28
    143a:	ff 90       	pop	r15
    143c:	0f 91       	pop	r16
    143e:	1f 91       	pop	r17
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	0e 94 97 06 	call	0xd2e	; 0xd2e <__addsf3x>
    1448:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_round>

0000144c <modf>:
    144c:	fa 01       	movw	r30, r20
    144e:	dc 01       	movw	r26, r24
    1450:	aa 0f       	add	r26, r26
    1452:	bb 1f       	adc	r27, r27
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	bf 57       	subi	r27, 0x7F	; 127
    145a:	28 f4       	brcc	.+10     	; 0x1466 <modf+0x1a>
    145c:	22 27       	eor	r18, r18
    145e:	33 27       	eor	r19, r19
    1460:	44 27       	eor	r20, r20
    1462:	50 78       	andi	r21, 0x80	; 128
    1464:	20 c0       	rjmp	.+64     	; 0x14a6 <modf+0x5a>
    1466:	b7 51       	subi	r27, 0x17	; 23
    1468:	90 f4       	brcc	.+36     	; 0x148e <modf+0x42>
    146a:	ab 2f       	mov	r26, r27
    146c:	00 24       	eor	r0, r0
    146e:	46 95       	lsr	r20
    1470:	37 95       	ror	r19
    1472:	27 95       	ror	r18
    1474:	01 1c       	adc	r0, r1
    1476:	a3 95       	inc	r26
    1478:	d2 f3       	brmi	.-12     	; 0x146e <modf+0x22>
    147a:	00 20       	and	r0, r0
    147c:	71 f0       	breq	.+28     	; 0x149a <modf+0x4e>
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	44 1f       	adc	r20, r20
    1484:	b3 95       	inc	r27
    1486:	da f3       	brmi	.-10     	; 0x147e <modf+0x32>
    1488:	0e d0       	rcall	.+28     	; 0x14a6 <modf+0x5a>
    148a:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__subsf3>
    148e:	61 30       	cpi	r22, 0x01	; 1
    1490:	71 05       	cpc	r23, r1
    1492:	a0 e8       	ldi	r26, 0x80	; 128
    1494:	8a 07       	cpc	r24, r26
    1496:	b9 46       	sbci	r27, 0x69	; 105
    1498:	30 f4       	brcc	.+12     	; 0x14a6 <modf+0x5a>
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	66 27       	eor	r22, r22
    14a0:	77 27       	eor	r23, r23
    14a2:	88 27       	eor	r24, r24
    14a4:	90 78       	andi	r25, 0x80	; 128
    14a6:	30 96       	adiw	r30, 0x00	; 0
    14a8:	21 f0       	breq	.+8      	; 0x14b2 <modf+0x66>
    14aa:	20 83       	st	Z, r18
    14ac:	31 83       	std	Z+1, r19	; 0x01
    14ae:	42 83       	std	Z+2, r20	; 0x02
    14b0:	53 83       	std	Z+3, r21	; 0x03
    14b2:	08 95       	ret

000014b4 <__umulhisi3>:
    14b4:	a2 9f       	mul	r26, r18
    14b6:	b0 01       	movw	r22, r0
    14b8:	b3 9f       	mul	r27, r19
    14ba:	c0 01       	movw	r24, r0
    14bc:	a3 9f       	mul	r26, r19
    14be:	70 0d       	add	r23, r0
    14c0:	81 1d       	adc	r24, r1
    14c2:	11 24       	eor	r1, r1
    14c4:	91 1d       	adc	r25, r1
    14c6:	b2 9f       	mul	r27, r18
    14c8:	70 0d       	add	r23, r0
    14ca:	81 1d       	adc	r24, r1
    14cc:	11 24       	eor	r1, r1
    14ce:	91 1d       	adc	r25, r1
    14d0:	08 95       	ret

000014d2 <dtostrf>:
    14d2:	ef 92       	push	r14
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	e8 01       	movw	r28, r16
    14de:	47 fd       	sbrc	r20, 7
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <dtostrf+0x14>
    14e2:	34 e0       	ldi	r19, 0x04	; 4
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <dtostrf+0x16>
    14e6:	34 e1       	ldi	r19, 0x14	; 20
    14e8:	04 2e       	mov	r0, r20
    14ea:	00 0c       	add	r0, r0
    14ec:	55 0b       	sbc	r21, r21
    14ee:	57 ff       	sbrs	r21, 7
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <dtostrf+0x26>
    14f2:	51 95       	neg	r21
    14f4:	41 95       	neg	r20
    14f6:	51 09       	sbc	r21, r1
    14f8:	e3 2e       	mov	r14, r19
    14fa:	02 2f       	mov	r16, r18
    14fc:	24 2f       	mov	r18, r20
    14fe:	ae 01       	movw	r20, r28
    1500:	0e 94 89 0a 	call	0x1512	; 0x1512 <dtoa_prf>
    1504:	ce 01       	movw	r24, r28
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ef 90       	pop	r14
    1510:	08 95       	ret

00001512 <dtoa_prf>:
    1512:	a9 e0       	ldi	r26, 0x09	; 9
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ef e8       	ldi	r30, 0x8F	; 143
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__prologue_saves__+0xc>
    151e:	6a 01       	movw	r12, r20
    1520:	12 2f       	mov	r17, r18
    1522:	b0 2e       	mov	r11, r16
    1524:	2b e3       	ldi	r18, 0x3B	; 59
    1526:	20 17       	cp	r18, r16
    1528:	20 f0       	brcs	.+8      	; 0x1532 <dtoa_prf+0x20>
    152a:	ff 24       	eor	r15, r15
    152c:	f3 94       	inc	r15
    152e:	f0 0e       	add	r15, r16
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <dtoa_prf+0x24>
    1532:	2c e3       	ldi	r18, 0x3C	; 60
    1534:	f2 2e       	mov	r15, r18
    1536:	0f 2d       	mov	r16, r15
    1538:	27 e0       	ldi	r18, 0x07	; 7
    153a:	ae 01       	movw	r20, r28
    153c:	4f 5f       	subi	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__ftoa_engine>
    1544:	bc 01       	movw	r22, r24
    1546:	49 81       	ldd	r20, Y+1	; 0x01
    1548:	84 2f       	mov	r24, r20
    154a:	89 70       	andi	r24, 0x09	; 9
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	31 f0       	breq	.+12     	; 0x155c <dtoa_prf+0x4a>
    1550:	e1 fc       	sbrc	r14, 1
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <dtoa_prf+0x4e>
    1554:	e0 fe       	sbrs	r14, 0
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <dtoa_prf+0x52>
    1558:	90 e2       	ldi	r25, 0x20	; 32
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <dtoa_prf+0x54>
    155c:	9d e2       	ldi	r25, 0x2D	; 45
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <dtoa_prf+0x54>
    1560:	9b e2       	ldi	r25, 0x2B	; 43
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <dtoa_prf+0x54>
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	5e 2d       	mov	r21, r14
    1568:	50 71       	andi	r21, 0x10	; 16
    156a:	43 ff       	sbrs	r20, 3
    156c:	3c c0       	rjmp	.+120    	; 0x15e6 <dtoa_prf+0xd4>
    156e:	91 11       	cpse	r25, r1
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <dtoa_prf+0x64>
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <dtoa_prf+0x66>
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	81 17       	cp	r24, r17
    157a:	18 f4       	brcc	.+6      	; 0x1582 <dtoa_prf+0x70>
    157c:	21 2f       	mov	r18, r17
    157e:	28 1b       	sub	r18, r24
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <dtoa_prf+0x72>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	51 11       	cpse	r21, r1
    1586:	0b c0       	rjmp	.+22     	; 0x159e <dtoa_prf+0x8c>
    1588:	f6 01       	movw	r30, r12
    158a:	82 2f       	mov	r24, r18
    158c:	30 e2       	ldi	r19, 0x20	; 32
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <dtoa_prf+0x86>
    1592:	31 93       	st	Z+, r19
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	fb cf       	rjmp	.-10     	; 0x158e <dtoa_prf+0x7c>
    1598:	c2 0e       	add	r12, r18
    159a:	d1 1c       	adc	r13, r1
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	99 23       	and	r25, r25
    15a0:	29 f0       	breq	.+10     	; 0x15ac <dtoa_prf+0x9a>
    15a2:	d6 01       	movw	r26, r12
    15a4:	9c 93       	st	X, r25
    15a6:	f6 01       	movw	r30, r12
    15a8:	31 96       	adiw	r30, 0x01	; 1
    15aa:	6f 01       	movw	r12, r30
    15ac:	c6 01       	movw	r24, r12
    15ae:	03 96       	adiw	r24, 0x03	; 3
    15b0:	e2 fe       	sbrs	r14, 2
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <dtoa_prf+0xb6>
    15b4:	3e e4       	ldi	r19, 0x4E	; 78
    15b6:	d6 01       	movw	r26, r12
    15b8:	3c 93       	st	X, r19
    15ba:	41 e4       	ldi	r20, 0x41	; 65
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	4c 93       	st	X, r20
    15c0:	11 97       	sbiw	r26, 0x01	; 1
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	3c 93       	st	X, r19
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <dtoa_prf+0xc2>
    15c8:	3e e6       	ldi	r19, 0x6E	; 110
    15ca:	f6 01       	movw	r30, r12
    15cc:	30 83       	st	Z, r19
    15ce:	41 e6       	ldi	r20, 0x61	; 97
    15d0:	41 83       	std	Z+1, r20	; 0x01
    15d2:	32 83       	std	Z+2, r19	; 0x02
    15d4:	fc 01       	movw	r30, r24
    15d6:	32 2f       	mov	r19, r18
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	33 23       	and	r19, r19
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <dtoa_prf+0xce>
    15de:	42 c0       	rjmp	.+132    	; 0x1664 <dtoa_prf+0x152>
    15e0:	41 93       	st	Z+, r20
    15e2:	31 50       	subi	r19, 0x01	; 1
    15e4:	fa cf       	rjmp	.-12     	; 0x15da <dtoa_prf+0xc8>
    15e6:	42 ff       	sbrs	r20, 2
    15e8:	44 c0       	rjmp	.+136    	; 0x1672 <dtoa_prf+0x160>
    15ea:	91 11       	cpse	r25, r1
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <dtoa_prf+0xe0>
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <dtoa_prf+0xe2>
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	81 17       	cp	r24, r17
    15f6:	18 f4       	brcc	.+6      	; 0x15fe <dtoa_prf+0xec>
    15f8:	21 2f       	mov	r18, r17
    15fa:	28 1b       	sub	r18, r24
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <dtoa_prf+0xee>
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	51 11       	cpse	r21, r1
    1602:	0b c0       	rjmp	.+22     	; 0x161a <dtoa_prf+0x108>
    1604:	f6 01       	movw	r30, r12
    1606:	82 2f       	mov	r24, r18
    1608:	30 e2       	ldi	r19, 0x20	; 32
    160a:	88 23       	and	r24, r24
    160c:	19 f0       	breq	.+6      	; 0x1614 <dtoa_prf+0x102>
    160e:	31 93       	st	Z+, r19
    1610:	81 50       	subi	r24, 0x01	; 1
    1612:	fb cf       	rjmp	.-10     	; 0x160a <dtoa_prf+0xf8>
    1614:	c2 0e       	add	r12, r18
    1616:	d1 1c       	adc	r13, r1
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	99 23       	and	r25, r25
    161c:	29 f0       	breq	.+10     	; 0x1628 <dtoa_prf+0x116>
    161e:	d6 01       	movw	r26, r12
    1620:	9c 93       	st	X, r25
    1622:	f6 01       	movw	r30, r12
    1624:	31 96       	adiw	r30, 0x01	; 1
    1626:	6f 01       	movw	r12, r30
    1628:	c6 01       	movw	r24, r12
    162a:	03 96       	adiw	r24, 0x03	; 3
    162c:	e2 fe       	sbrs	r14, 2
    162e:	0b c0       	rjmp	.+22     	; 0x1646 <dtoa_prf+0x134>
    1630:	39 e4       	ldi	r19, 0x49	; 73
    1632:	d6 01       	movw	r26, r12
    1634:	3c 93       	st	X, r19
    1636:	3e e4       	ldi	r19, 0x4E	; 78
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	3c 93       	st	X, r19
    163c:	11 97       	sbiw	r26, 0x01	; 1
    163e:	36 e4       	ldi	r19, 0x46	; 70
    1640:	12 96       	adiw	r26, 0x02	; 2
    1642:	3c 93       	st	X, r19
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <dtoa_prf+0x142>
    1646:	39 e6       	ldi	r19, 0x69	; 105
    1648:	f6 01       	movw	r30, r12
    164a:	30 83       	st	Z, r19
    164c:	3e e6       	ldi	r19, 0x6E	; 110
    164e:	31 83       	std	Z+1, r19	; 0x01
    1650:	36 e6       	ldi	r19, 0x66	; 102
    1652:	32 83       	std	Z+2, r19	; 0x02
    1654:	fc 01       	movw	r30, r24
    1656:	32 2f       	mov	r19, r18
    1658:	40 e2       	ldi	r20, 0x20	; 32
    165a:	33 23       	and	r19, r19
    165c:	19 f0       	breq	.+6      	; 0x1664 <dtoa_prf+0x152>
    165e:	41 93       	st	Z+, r20
    1660:	31 50       	subi	r19, 0x01	; 1
    1662:	fb cf       	rjmp	.-10     	; 0x165a <dtoa_prf+0x148>
    1664:	fc 01       	movw	r30, r24
    1666:	e2 0f       	add	r30, r18
    1668:	f1 1d       	adc	r31, r1
    166a:	10 82       	st	Z, r1
    166c:	8e ef       	ldi	r24, 0xFE	; 254
    166e:	9f ef       	ldi	r25, 0xFF	; 255
    1670:	a6 c0       	rjmp	.+332    	; 0x17be <dtoa_prf+0x2ac>
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	91 11       	cpse	r25, r1
    1678:	02 c0       	rjmp	.+4      	; 0x167e <dtoa_prf+0x16c>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	16 16       	cp	r1, r22
    1680:	17 06       	cpc	r1, r23
    1682:	1c f4       	brge	.+6      	; 0x168a <dtoa_prf+0x178>
    1684:	fb 01       	movw	r30, r22
    1686:	31 96       	adiw	r30, 0x01	; 1
    1688:	02 c0       	rjmp	.+4      	; 0x168e <dtoa_prf+0x17c>
    168a:	e1 e0       	ldi	r30, 0x01	; 1
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	2e 0f       	add	r18, r30
    1690:	3f 1f       	adc	r19, r31
    1692:	bb 20       	and	r11, r11
    1694:	21 f0       	breq	.+8      	; 0x169e <dtoa_prf+0x18c>
    1696:	eb 2d       	mov	r30, r11
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	31 96       	adiw	r30, 0x01	; 1
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <dtoa_prf+0x190>
    169e:	e0 e0       	ldi	r30, 0x00	; 0
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	2e 0f       	add	r18, r30
    16a4:	3f 1f       	adc	r19, r31
    16a6:	e1 2f       	mov	r30, r17
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	2e 17       	cp	r18, r30
    16ac:	3f 07       	cpc	r19, r31
    16ae:	1c f4       	brge	.+6      	; 0x16b6 <dtoa_prf+0x1a4>
    16b0:	12 1b       	sub	r17, r18
    16b2:	21 2f       	mov	r18, r17
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <dtoa_prf+0x1a6>
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	8e 2d       	mov	r24, r14
    16ba:	88 71       	andi	r24, 0x18	; 24
    16bc:	59 f4       	brne	.+22     	; 0x16d4 <dtoa_prf+0x1c2>
    16be:	f6 01       	movw	r30, r12
    16c0:	82 2f       	mov	r24, r18
    16c2:	30 e2       	ldi	r19, 0x20	; 32
    16c4:	88 23       	and	r24, r24
    16c6:	19 f0       	breq	.+6      	; 0x16ce <dtoa_prf+0x1bc>
    16c8:	31 93       	st	Z+, r19
    16ca:	81 50       	subi	r24, 0x01	; 1
    16cc:	fb cf       	rjmp	.-10     	; 0x16c4 <dtoa_prf+0x1b2>
    16ce:	c2 0e       	add	r12, r18
    16d0:	d1 1c       	adc	r13, r1
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	99 23       	and	r25, r25
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <dtoa_prf+0x1d0>
    16d8:	d6 01       	movw	r26, r12
    16da:	9c 93       	st	X, r25
    16dc:	f6 01       	movw	r30, r12
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	6f 01       	movw	r12, r30
    16e2:	51 11       	cpse	r21, r1
    16e4:	0b c0       	rjmp	.+22     	; 0x16fc <dtoa_prf+0x1ea>
    16e6:	f6 01       	movw	r30, r12
    16e8:	82 2f       	mov	r24, r18
    16ea:	90 e3       	ldi	r25, 0x30	; 48
    16ec:	88 23       	and	r24, r24
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <dtoa_prf+0x1e4>
    16f0:	91 93       	st	Z+, r25
    16f2:	81 50       	subi	r24, 0x01	; 1
    16f4:	fb cf       	rjmp	.-10     	; 0x16ec <dtoa_prf+0x1da>
    16f6:	c2 0e       	add	r12, r18
    16f8:	d1 1c       	adc	r13, r1
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	0f 2d       	mov	r16, r15
    16fe:	06 0f       	add	r16, r22
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	34 2f       	mov	r19, r20
    1704:	30 71       	andi	r19, 0x10	; 16
    1706:	44 ff       	sbrs	r20, 4
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <dtoa_prf+0x1fe>
    170a:	91 33       	cpi	r25, 0x31	; 49
    170c:	09 f4       	brne	.+2      	; 0x1710 <dtoa_prf+0x1fe>
    170e:	01 50       	subi	r16, 0x01	; 1
    1710:	10 16       	cp	r1, r16
    1712:	24 f4       	brge	.+8      	; 0x171c <dtoa_prf+0x20a>
    1714:	09 30       	cpi	r16, 0x09	; 9
    1716:	18 f0       	brcs	.+6      	; 0x171e <dtoa_prf+0x20c>
    1718:	08 e0       	ldi	r16, 0x08	; 8
    171a:	01 c0       	rjmp	.+2      	; 0x171e <dtoa_prf+0x20c>
    171c:	01 e0       	ldi	r16, 0x01	; 1
    171e:	ab 01       	movw	r20, r22
    1720:	77 ff       	sbrs	r23, 7
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <dtoa_prf+0x216>
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	fb 01       	movw	r30, r22
    172a:	e4 1b       	sub	r30, r20
    172c:	f5 0b       	sbc	r31, r21
    172e:	a1 e0       	ldi	r26, 0x01	; 1
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ac 0f       	add	r26, r28
    1734:	bd 1f       	adc	r27, r29
    1736:	ea 0f       	add	r30, r26
    1738:	fb 1f       	adc	r31, r27
    173a:	8e e2       	ldi	r24, 0x2E	; 46
    173c:	a8 2e       	mov	r10, r24
    173e:	4b 01       	movw	r8, r22
    1740:	80 1a       	sub	r8, r16
    1742:	91 08       	sbc	r9, r1
    1744:	0b 2d       	mov	r16, r11
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	11 95       	neg	r17
    174a:	01 95       	neg	r16
    174c:	11 09       	sbc	r17, r1
    174e:	4f 3f       	cpi	r20, 0xFF	; 255
    1750:	bf ef       	ldi	r27, 0xFF	; 255
    1752:	5b 07       	cpc	r21, r27
    1754:	21 f4       	brne	.+8      	; 0x175e <dtoa_prf+0x24c>
    1756:	d6 01       	movw	r26, r12
    1758:	ac 92       	st	X, r10
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	6d 01       	movw	r12, r26
    175e:	64 17       	cp	r22, r20
    1760:	75 07       	cpc	r23, r21
    1762:	2c f0       	brlt	.+10     	; 0x176e <dtoa_prf+0x25c>
    1764:	84 16       	cp	r8, r20
    1766:	95 06       	cpc	r9, r21
    1768:	14 f4       	brge	.+4      	; 0x176e <dtoa_prf+0x25c>
    176a:	81 81       	ldd	r24, Z+1	; 0x01
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <dtoa_prf+0x25e>
    176e:	80 e3       	ldi	r24, 0x30	; 48
    1770:	41 50       	subi	r20, 0x01	; 1
    1772:	51 09       	sbc	r21, r1
    1774:	31 96       	adiw	r30, 0x01	; 1
    1776:	d6 01       	movw	r26, r12
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	7d 01       	movw	r14, r26
    177c:	40 17       	cp	r20, r16
    177e:	51 07       	cpc	r21, r17
    1780:	24 f0       	brlt	.+8      	; 0x178a <dtoa_prf+0x278>
    1782:	d6 01       	movw	r26, r12
    1784:	8c 93       	st	X, r24
    1786:	67 01       	movw	r12, r14
    1788:	e2 cf       	rjmp	.-60     	; 0x174e <dtoa_prf+0x23c>
    178a:	64 17       	cp	r22, r20
    178c:	75 07       	cpc	r23, r21
    178e:	39 f4       	brne	.+14     	; 0x179e <dtoa_prf+0x28c>
    1790:	96 33       	cpi	r25, 0x36	; 54
    1792:	20 f4       	brcc	.+8      	; 0x179c <dtoa_prf+0x28a>
    1794:	95 33       	cpi	r25, 0x35	; 53
    1796:	19 f4       	brne	.+6      	; 0x179e <dtoa_prf+0x28c>
    1798:	31 11       	cpse	r19, r1
    179a:	01 c0       	rjmp	.+2      	; 0x179e <dtoa_prf+0x28c>
    179c:	81 e3       	ldi	r24, 0x31	; 49
    179e:	f6 01       	movw	r30, r12
    17a0:	80 83       	st	Z, r24
    17a2:	f7 01       	movw	r30, r14
    17a4:	82 2f       	mov	r24, r18
    17a6:	90 e2       	ldi	r25, 0x20	; 32
    17a8:	88 23       	and	r24, r24
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <dtoa_prf+0x2a0>
    17ac:	91 93       	st	Z+, r25
    17ae:	81 50       	subi	r24, 0x01	; 1
    17b0:	fb cf       	rjmp	.-10     	; 0x17a8 <dtoa_prf+0x296>
    17b2:	f7 01       	movw	r30, r14
    17b4:	e2 0f       	add	r30, r18
    17b6:	f1 1d       	adc	r31, r1
    17b8:	10 82       	st	Z, r1
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	29 96       	adiw	r28, 0x09	; 9
    17c0:	ec e0       	ldi	r30, 0x0C	; 12
    17c2:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__epilogue_restores__+0xc>

000017c6 <__ftoa_engine>:
    17c6:	28 30       	cpi	r18, 0x08	; 8
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <__ftoa_engine+0x6>
    17ca:	27 e0       	ldi	r18, 0x07	; 7
    17cc:	33 27       	eor	r19, r19
    17ce:	da 01       	movw	r26, r20
    17d0:	99 0f       	add	r25, r25
    17d2:	31 1d       	adc	r19, r1
    17d4:	87 fd       	sbrc	r24, 7
    17d6:	91 60       	ori	r25, 0x01	; 1
    17d8:	00 96       	adiw	r24, 0x00	; 0
    17da:	61 05       	cpc	r22, r1
    17dc:	71 05       	cpc	r23, r1
    17de:	39 f4       	brne	.+14     	; 0x17ee <__ftoa_engine+0x28>
    17e0:	32 60       	ori	r19, 0x02	; 2
    17e2:	2e 5f       	subi	r18, 0xFE	; 254
    17e4:	3d 93       	st	X+, r19
    17e6:	30 e3       	ldi	r19, 0x30	; 48
    17e8:	2a 95       	dec	r18
    17ea:	e1 f7       	brne	.-8      	; 0x17e4 <__ftoa_engine+0x1e>
    17ec:	08 95       	ret
    17ee:	9f 3f       	cpi	r25, 0xFF	; 255
    17f0:	30 f0       	brcs	.+12     	; 0x17fe <__ftoa_engine+0x38>
    17f2:	80 38       	cpi	r24, 0x80	; 128
    17f4:	71 05       	cpc	r23, r1
    17f6:	61 05       	cpc	r22, r1
    17f8:	09 f0       	breq	.+2      	; 0x17fc <__ftoa_engine+0x36>
    17fa:	3c 5f       	subi	r19, 0xFC	; 252
    17fc:	3c 5f       	subi	r19, 0xFC	; 252
    17fe:	3d 93       	st	X+, r19
    1800:	91 30       	cpi	r25, 0x01	; 1
    1802:	08 f0       	brcs	.+2      	; 0x1806 <__ftoa_engine+0x40>
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	91 1d       	adc	r25, r1
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	1f 93       	push	r17
    180e:	0f 93       	push	r16
    1810:	ff 92       	push	r15
    1812:	ef 92       	push	r14
    1814:	19 2f       	mov	r17, r25
    1816:	98 7f       	andi	r25, 0xF8	; 248
    1818:	96 95       	lsr	r25
    181a:	e9 2f       	mov	r30, r25
    181c:	96 95       	lsr	r25
    181e:	96 95       	lsr	r25
    1820:	e9 0f       	add	r30, r25
    1822:	ff 27       	eor	r31, r31
    1824:	ec 5b       	subi	r30, 0xBC	; 188
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	99 27       	eor	r25, r25
    182a:	33 27       	eor	r19, r19
    182c:	ee 24       	eor	r14, r14
    182e:	ff 24       	eor	r15, r15
    1830:	a7 01       	movw	r20, r14
    1832:	e7 01       	movw	r28, r14
    1834:	05 90       	lpm	r0, Z+
    1836:	08 94       	sec
    1838:	07 94       	ror	r0
    183a:	28 f4       	brcc	.+10     	; 0x1846 <__ftoa_engine+0x80>
    183c:	36 0f       	add	r19, r22
    183e:	e7 1e       	adc	r14, r23
    1840:	f8 1e       	adc	r15, r24
    1842:	49 1f       	adc	r20, r25
    1844:	51 1d       	adc	r21, r1
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	06 94       	lsr	r0
    1850:	a1 f7       	brne	.-24     	; 0x183a <__ftoa_engine+0x74>
    1852:	05 90       	lpm	r0, Z+
    1854:	07 94       	ror	r0
    1856:	28 f4       	brcc	.+10     	; 0x1862 <__ftoa_engine+0x9c>
    1858:	e7 0e       	add	r14, r23
    185a:	f8 1e       	adc	r15, r24
    185c:	49 1f       	adc	r20, r25
    185e:	56 1f       	adc	r21, r22
    1860:	c1 1d       	adc	r28, r1
    1862:	77 0f       	add	r23, r23
    1864:	88 1f       	adc	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	66 1f       	adc	r22, r22
    186a:	06 94       	lsr	r0
    186c:	a1 f7       	brne	.-24     	; 0x1856 <__ftoa_engine+0x90>
    186e:	05 90       	lpm	r0, Z+
    1870:	07 94       	ror	r0
    1872:	28 f4       	brcc	.+10     	; 0x187e <__ftoa_engine+0xb8>
    1874:	f8 0e       	add	r15, r24
    1876:	49 1f       	adc	r20, r25
    1878:	56 1f       	adc	r21, r22
    187a:	c7 1f       	adc	r28, r23
    187c:	d1 1d       	adc	r29, r1
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	06 94       	lsr	r0
    1888:	a1 f7       	brne	.-24     	; 0x1872 <__ftoa_engine+0xac>
    188a:	05 90       	lpm	r0, Z+
    188c:	07 94       	ror	r0
    188e:	20 f4       	brcc	.+8      	; 0x1898 <__ftoa_engine+0xd2>
    1890:	49 0f       	add	r20, r25
    1892:	56 1f       	adc	r21, r22
    1894:	c7 1f       	adc	r28, r23
    1896:	d8 1f       	adc	r29, r24
    1898:	99 0f       	add	r25, r25
    189a:	66 1f       	adc	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	06 94       	lsr	r0
    18a2:	a9 f7       	brne	.-22     	; 0x188e <__ftoa_engine+0xc8>
    18a4:	84 91       	lpm	r24, Z
    18a6:	10 95       	com	r17
    18a8:	17 70       	andi	r17, 0x07	; 7
    18aa:	41 f0       	breq	.+16     	; 0x18bc <__ftoa_engine+0xf6>
    18ac:	d6 95       	lsr	r29
    18ae:	c7 95       	ror	r28
    18b0:	57 95       	ror	r21
    18b2:	47 95       	ror	r20
    18b4:	f7 94       	ror	r15
    18b6:	e7 94       	ror	r14
    18b8:	1a 95       	dec	r17
    18ba:	c1 f7       	brne	.-16     	; 0x18ac <__ftoa_engine+0xe6>
    18bc:	ea ee       	ldi	r30, 0xEA	; 234
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	68 94       	set
    18c2:	15 90       	lpm	r1, Z+
    18c4:	15 91       	lpm	r17, Z+
    18c6:	35 91       	lpm	r19, Z+
    18c8:	65 91       	lpm	r22, Z+
    18ca:	95 91       	lpm	r25, Z+
    18cc:	05 90       	lpm	r0, Z+
    18ce:	7f e2       	ldi	r23, 0x2F	; 47
    18d0:	73 95       	inc	r23
    18d2:	e1 18       	sub	r14, r1
    18d4:	f1 0a       	sbc	r15, r17
    18d6:	43 0b       	sbc	r20, r19
    18d8:	56 0b       	sbc	r21, r22
    18da:	c9 0b       	sbc	r28, r25
    18dc:	d0 09       	sbc	r29, r0
    18de:	c0 f7       	brcc	.-16     	; 0x18d0 <__ftoa_engine+0x10a>
    18e0:	e1 0c       	add	r14, r1
    18e2:	f1 1e       	adc	r15, r17
    18e4:	43 1f       	adc	r20, r19
    18e6:	56 1f       	adc	r21, r22
    18e8:	c9 1f       	adc	r28, r25
    18ea:	d0 1d       	adc	r29, r0
    18ec:	7e f4       	brtc	.+30     	; 0x190c <__ftoa_engine+0x146>
    18ee:	70 33       	cpi	r23, 0x30	; 48
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <__ftoa_engine+0x130>
    18f2:	8a 95       	dec	r24
    18f4:	e6 cf       	rjmp	.-52     	; 0x18c2 <__ftoa_engine+0xfc>
    18f6:	e8 94       	clt
    18f8:	01 50       	subi	r16, 0x01	; 1
    18fa:	30 f0       	brcs	.+12     	; 0x1908 <__ftoa_engine+0x142>
    18fc:	08 0f       	add	r16, r24
    18fe:	0a f4       	brpl	.+2      	; 0x1902 <__ftoa_engine+0x13c>
    1900:	00 27       	eor	r16, r16
    1902:	02 17       	cp	r16, r18
    1904:	08 f4       	brcc	.+2      	; 0x1908 <__ftoa_engine+0x142>
    1906:	20 2f       	mov	r18, r16
    1908:	23 95       	inc	r18
    190a:	02 2f       	mov	r16, r18
    190c:	7a 33       	cpi	r23, 0x3A	; 58
    190e:	28 f0       	brcs	.+10     	; 0x191a <__ftoa_engine+0x154>
    1910:	79 e3       	ldi	r23, 0x39	; 57
    1912:	7d 93       	st	X+, r23
    1914:	2a 95       	dec	r18
    1916:	e9 f7       	brne	.-6      	; 0x1912 <__ftoa_engine+0x14c>
    1918:	10 c0       	rjmp	.+32     	; 0x193a <__ftoa_engine+0x174>
    191a:	7d 93       	st	X+, r23
    191c:	2a 95       	dec	r18
    191e:	89 f6       	brne	.-94     	; 0x18c2 <__ftoa_engine+0xfc>
    1920:	06 94       	lsr	r0
    1922:	97 95       	ror	r25
    1924:	67 95       	ror	r22
    1926:	37 95       	ror	r19
    1928:	17 95       	ror	r17
    192a:	17 94       	ror	r1
    192c:	e1 18       	sub	r14, r1
    192e:	f1 0a       	sbc	r15, r17
    1930:	43 0b       	sbc	r20, r19
    1932:	56 0b       	sbc	r21, r22
    1934:	c9 0b       	sbc	r28, r25
    1936:	d0 09       	sbc	r29, r0
    1938:	98 f0       	brcs	.+38     	; 0x1960 <__ftoa_engine+0x19a>
    193a:	23 95       	inc	r18
    193c:	7e 91       	ld	r23, -X
    193e:	73 95       	inc	r23
    1940:	7a 33       	cpi	r23, 0x3A	; 58
    1942:	08 f0       	brcs	.+2      	; 0x1946 <__ftoa_engine+0x180>
    1944:	70 e3       	ldi	r23, 0x30	; 48
    1946:	7c 93       	st	X, r23
    1948:	20 13       	cpse	r18, r16
    194a:	b8 f7       	brcc	.-18     	; 0x193a <__ftoa_engine+0x174>
    194c:	7e 91       	ld	r23, -X
    194e:	70 61       	ori	r23, 0x10	; 16
    1950:	7d 93       	st	X+, r23
    1952:	30 f0       	brcs	.+12     	; 0x1960 <__ftoa_engine+0x19a>
    1954:	83 95       	inc	r24
    1956:	71 e3       	ldi	r23, 0x31	; 49
    1958:	7d 93       	st	X+, r23
    195a:	70 e3       	ldi	r23, 0x30	; 48
    195c:	2a 95       	dec	r18
    195e:	e1 f7       	brne	.-8      	; 0x1958 <__ftoa_engine+0x192>
    1960:	11 24       	eor	r1, r1
    1962:	ef 90       	pop	r14
    1964:	ff 90       	pop	r15
    1966:	0f 91       	pop	r16
    1968:	1f 91       	pop	r17
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	99 27       	eor	r25, r25
    1970:	87 fd       	sbrc	r24, 7
    1972:	90 95       	com	r25
    1974:	08 95       	ret

00001976 <__prologue_saves__>:
    1976:	2f 92       	push	r2
    1978:	3f 92       	push	r3
    197a:	4f 92       	push	r4
    197c:	5f 92       	push	r5
    197e:	6f 92       	push	r6
    1980:	7f 92       	push	r7
    1982:	8f 92       	push	r8
    1984:	9f 92       	push	r9
    1986:	af 92       	push	r10
    1988:	bf 92       	push	r11
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	ca 1b       	sub	r28, r26
    19a0:	db 0b       	sbc	r29, r27
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	09 94       	ijmp

000019ae <__epilogue_restores__>:
    19ae:	2a 88       	ldd	r2, Y+18	; 0x12
    19b0:	39 88       	ldd	r3, Y+17	; 0x11
    19b2:	48 88       	ldd	r4, Y+16	; 0x10
    19b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    19bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    19be:	aa 84       	ldd	r10, Y+10	; 0x0a
    19c0:	b9 84       	ldd	r11, Y+9	; 0x09
    19c2:	c8 84       	ldd	r12, Y+8	; 0x08
    19c4:	df 80       	ldd	r13, Y+7	; 0x07
    19c6:	ee 80       	ldd	r14, Y+6	; 0x06
    19c8:	fd 80       	ldd	r15, Y+5	; 0x05
    19ca:	0c 81       	ldd	r16, Y+4	; 0x04
    19cc:	1b 81       	ldd	r17, Y+3	; 0x03
    19ce:	aa 81       	ldd	r26, Y+2	; 0x02
    19d0:	b9 81       	ldd	r27, Y+1	; 0x01
    19d2:	ce 0f       	add	r28, r30
    19d4:	d1 1d       	adc	r29, r1
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	ed 01       	movw	r28, r26
    19e2:	08 95       	ret

000019e4 <_exit>:
    19e4:	f8 94       	cli

000019e6 <__stop_program>:
    19e6:	ff cf       	rjmp	.-2      	; 0x19e6 <__stop_program>
